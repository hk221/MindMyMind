{"version":3,"file":"3.89f2499ca719cceca643.js","mappings":"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","sources":["webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/firebase.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/LoginForm.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/TickButton.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/TaskTable.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/timer.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/AuthContext.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/StatisticsDialog.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/Shop.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/Enter_Text.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/StudyMethod.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/motivation.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/AppBar.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/components/List.js","webpack://99ab3657-68f7-4e59-9a2b-286558f37c78/./src/Plugin.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {getFirestore} from 'firebase/firestore';\nimport { getAuth } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDqW8Mcav0opCXNvQOptRL8zhV19pwdazw\",\n  authDomain: \"quizdatabase-6eda3.firebaseapp.com\",\n  projectId: \"quizdatabase-6eda3\",\n  storageBucket: \"quizdatabase-6eda3.firebasestorage.app\",\n  messagingSenderId: \"741614543682\",\n  appId: \"1:741614543682:web:4cbb172200a8fccd3c5edb\",\n  databaseURL: \"https://quizdatabase-6eda3-default-rtdb.firebaseio.com/\" \n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const firestore = getFirestore(app);\nexport const auth = getAuth(app);\nexport default app; ","// AuthForm.jsx\nimport React, { useState } from \"react\";\nimport { auth } from \"./firebase\";\nimport {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { TextField, Button, Typography, Box, Link } from \"@mui/material\";\n\nexport default function AuthForm({ onLogin }) {\n  const [isLogin, setIsLogin] = useState(true); // Toggle between login/signup\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleAuth = async () => {\n    try {\n      const userCred = isLogin\n        ? await signInWithEmailAndPassword(auth, email, password)\n        : await createUserWithEmailAndPassword(auth, email, password);\n\n      onLogin(userCred.user.uid);\n    } catch (error) {\n      alert(`Auth failed: ${error.message}`);\n    }\n  };\n\n  return (\n    <Box sx={{ maxWidth: 320, mx: \"auto\", textAlign: \"center\", mt: 8 }}>\n      <Typography variant=\"h5\" sx={{ mb: 2 }}>\n        {isLogin ? \"Login\" : \"Sign Up\"}\n      </Typography>\n\n      <TextField\n        label=\"Email\"\n        type=\"email\"\n        fullWidth\n        margin=\"normal\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <TextField\n        label=\"Password\"\n        type=\"password\"\n        fullWidth\n        margin=\"normal\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n\n      <Button\n        variant=\"contained\"\n        fullWidth\n        sx={{ mt: 2 }}\n        onClick={handleAuth}\n      >\n        {isLogin ? \"Login\" : \"Sign Up\"}\n      </Button>\n\n      <Typography variant=\"body2\" sx={{ mt: 2 }}>\n        {isLogin ? \"Don't have an account?\" : \"Already have an account?\"}{\" \"}\n        <Link\n          component=\"button\"\n          variant=\"body2\"\n          onClick={() => setIsLogin(!isLogin)}\n        >\n          {isLogin ? \"Sign Up\" : \"Login\"}\n        </Link>\n      </Typography>\n    </Box>\n  );\n}","let lastSentCommand = \"\";\nlet lastSentTime = 0;\n\nimport React from \"react\";\nimport CheckIcon from \"@mui/icons-material/Check\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport { getDatabase, ref, set } from \"firebase/database\";\n\nexport default function StandaloneToggleButton({ selected, onChange }) {\n  const sendCommand = (command) => {\n    const now = Date.now();\n    if (command === lastSentCommand && now - lastSentTime < 1000) return;\n\n    lastSentCommand = command;\n    lastSentTime = now;\n\n    const db = getDatabase();\n    set(ref(db, \"/webCommand\"), command);\n  };\n\n  const handleToggle = (event, newSelected) => {\n    // Only send command if toggling from off → on\n    if (!selected && newSelected) {\n      sendCommand(\"TASK CHECKED OFF, well done mate!\");\n    }\n    onChange(event, newSelected);\n  };\n\n  return (\n    <ToggleButton\n      value=\"check\"\n      selected={selected}\n      onChange={handleToggle}\n      sx={{\n        width: 30,\n        height: 30,\n        borderRadius: \"75%\",\n        \"&.Mui-selected\": {\n          backgroundColor: \"#088F8F\",\n          \"&:hover\": {\n            backgroundColor: \"#088F8F\",\n          },\n        },\n      }}\n    >\n      <CheckIcon\n        fontSize=\"small\"\n        sx={{\n          color: selected ? \"#ffffff\" : \"#088F8F\",\n        }}\n      />\n    </ToggleButton>\n  );\n}","import React, { useState } from \"react\";\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  Box,\n  IconButton,\n  Collapse,\n  TextField,\n} from \"@mui/material\";\nimport StandaloneToggleButton from \"./TickButton\";\nimport {\n  Alarm as AlarmIcon,\n  Delete as DeleteIcon,\n  Edit as EditIcon,\n  Save as SaveIcon,\n  Add as AddIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n} from \"@mui/icons-material\";\n\n// --- 1) Helper to format time into HH:MM:SS ---\nconst formatTime = (seconds) => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n  return `${hours ? `${hours}:` : \"\"}${minutes < 10 ? \"0\" : \"\"}${minutes}:${\n    secs < 10 ? \"0\" : \"\"\n  }${secs}`;\n};\n\n// --- 2) Subcomponent for a single Subtask row ---\nfunction SubtaskRow({\n  subtask,\n  itemId,\n  deleteMode,\n  editingSubtask,\n  editedSubtaskName,\n  setEditedSubtaskName,\n  toggleSubtaskCompletion,\n  handleSaveSubtask,\n  handleEditSubtask,\n  startSubtaskTimer,\n  deleteSubtask,\n}) {\n  const isEditingThis =\n    editingSubtask?.taskId === itemId && editingSubtask?.subtaskId === subtask.id;\n\n  return (\n    <TableRow>\n      {/* Subtask Name + Toggle */}\n      <TableCell align=\"left\" sx={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}>\n        <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n          <StandaloneToggleButton\n            selected={subtask.completed}\n            onChange={() => toggleSubtaskCompletion(itemId, subtask.id)}\n          />\n          {isEditingThis ? (\n            <TextField\n              value={editedSubtaskName}\n              onChange={(e) => setEditedSubtaskName(e.target.value)}\n              size=\"small\"\n              fullWidth\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") handleSaveSubtask(itemId, subtask);\n              }}\n              sx={{ ml: 1 }}\n            />\n          ) : (\n            <Typography variant=\"body1\" sx={{ ml: 1 }}>\n              {subtask.name}\n            </Typography>\n          )}\n        </Box>\n      </TableCell>\n\n      {/* Time */}\n      <TableCell align=\"center\">\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {formatTime(subtask.time)}\n        </Typography>\n      </TableCell>\n\n      {/* Actions */}\n      <TableCell align=\"center\">\n        {!deleteMode ? (\n          <>\n            {isEditingThis ? (\n              <IconButton onClick={() => handleSaveSubtask(itemId, subtask)}>\n                <SaveIcon sx={{ fontSize: 24 }} />\n              </IconButton>\n            ) : (\n              <IconButton onClick={() => handleEditSubtask(itemId, subtask)}>\n                <EditIcon sx={{ fontSize: 24 }} />\n              </IconButton>\n            )}\n            <IconButton onClick={() => startSubtaskTimer(itemId, subtask.id)}>\n              <AlarmIcon sx={{ fontSize: 24 }} />\n            </IconButton>\n          </>\n        ) : (\n          <IconButton\n            sx={{\n              backgroundColor: \"#ffebee\",\n              color: \"#d32f2f\",\n              \"&:hover\": { backgroundColor: \"#ffcdd2\" },\n            }}\n            aria-label=\"delete subtask\"\n            onClick={() => deleteSubtask(itemId, subtask.id)}\n          >\n            <DeleteIcon sx={{ fontSize: 24 }} />\n          </IconButton>\n        )}\n      </TableCell>\n    </TableRow>\n  );\n}\n\n// --- 3) Subcomponent that displays the entire Subtask section (expanded area) ---\nfunction SubtaskSection({\n  item,\n  expandedTask,\n  deleteMode,\n  subtaskInput,\n  setSubtaskInput,\n  addSubtask,\n  editingSubtask,\n  setEditingSubtask,\n  editedSubtaskName,\n  setEditedSubtaskName,\n  updateSubtask,\n  deleteSubtask,\n  toggleSubtaskCompletion,\n  startSubtaskTimer,\n}) {\n  // Local helpers for subtask editing\n  const handleEditSubtask = (taskId, subtask) => {\n    setEditingSubtask({ taskId, subtaskId: subtask.id });\n    setEditedSubtaskName(subtask.name);\n  };\n  const handleSaveSubtask = (taskId, subtask) => {\n    updateSubtask(taskId, subtask.id, editedSubtaskName);\n    setEditingSubtask(null);\n  };\n  const handleAddSubtask = (taskId) => {\n    if (subtaskInput.trim()) {\n      addSubtask(taskId, subtaskInput.trim());\n      setSubtaskInput(\"\");\n    }\n  };\n\n  return (\n    <TableRow>\n      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={3}>\n        <Collapse in={expandedTask === item.id} timeout=\"auto\" unmountOnExit>\n          <Box sx={{ margin: 1, borderLeft: \"2px solid #088F8F\", pl: 2 }}>\n            <Typography\n              variant=\"subtitle1\"\n              gutterBottom\n              sx={{ fontWeight: \"bold\", fontSize: \"1.1rem\", color: \"#00796b\" }}\n            >\n              Subtasks\n            </Typography>\n            <Table size=\"small\" aria-label=\"subtasks\">\n              <TableHead>\n                <TableRow>\n                  <TableCell align=\"left\">Subtask</TableCell>\n                  <TableCell align=\"center\">Time</TableCell>\n                  <TableCell align=\"center\">Actions</TableCell>\n                </TableRow>\n              </TableHead>\n\n              <TableBody>\n                {item.subtasks?.length ? (\n                  item.subtasks.map((subtask) => (\n                    <SubtaskRow\n                      key={subtask.id}\n                      subtask={subtask}\n                      itemId={item.id}\n                      deleteMode={deleteMode}\n                      editingSubtask={editingSubtask}\n                      editedSubtaskName={editedSubtaskName}\n                      setEditedSubtaskName={setEditedSubtaskName}\n                      toggleSubtaskCompletion={toggleSubtaskCompletion}\n                      handleSaveSubtask={handleSaveSubtask}\n                      handleEditSubtask={handleEditSubtask}\n                      startSubtaskTimer={startSubtaskTimer}\n                      deleteSubtask={deleteSubtask}\n                    />\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={3}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        No subtasks added.\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                )}\n\n                {/* Row for adding a new subtask */}\n                <TableRow>\n                  <TableCell colSpan={3}>\n                    <Box sx={{ display: \"flex\", alignItems: \"center\", mt: 1 }}>\n                      <TextField\n                        value={subtaskInput}\n                        onChange={(e) => setSubtaskInput(e.target.value)}\n                        size=\"small\"\n                        placeholder=\"New subtask\"\n                        fullWidth\n                        onKeyDown={(e) => {\n                          if (e.key === \"Enter\") handleAddSubtask(item.id);\n                        }}\n                      />\n                      <IconButton onClick={() => handleAddSubtask(item.id)}>\n                        <AddIcon />\n                      </IconButton>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  );\n}\n\n// --- 4) Subcomponent for the main Task row (non-expanded part) ---\nfunction TaskRow({\n  item,\n  editTaskId,\n  editedTaskName,\n  setEditedTaskName,\n  expandedTask,\n  deleteMode,\n  deleteItem,\n  startTimer,\n  toggleExpand,\n  handleEditClick,\n  handleSaveClick,\n  updateTask,\n}) {\n  return (\n    <TableRow role=\"checkbox\">\n      {/* Task name + Toggle */}\n      <TableCell align=\"left\" sx={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}>\n        <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\n          <StandaloneToggleButton\n            selected={item.completed}\n            onChange={() =>\n              updateTask(item.id, { ...item, completed: !item.completed })\n            }\n          />\n          {editTaskId === item.id ? (\n            <TextField\n              autoFocus\n              value={editedTaskName}\n              onChange={(e) => setEditedTaskName(e.target.value)}\n              size=\"small\"\n              fullWidth\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") handleSaveClick(item);\n              }}\n              sx={{ ml: 1 }}\n            />\n          ) : (\n            <Typography\n              sx={{ ml: 1, fontSize: \"1rem\", fontWeight: 500, cursor: \"pointer\" }}\n              onClick={() => toggleExpand(item.id)}\n            >\n              {item.name}\n            </Typography>\n          )}\n        </Box>\n      </TableCell>\n\n      {/* Total Time */}\n      <TableCell align=\"center\">\n        <Typography sx={{ fontSize: \"1rem\", fontWeight: 500, color: \"#004d40\" }}>\n          {formatTime(\n            item.time + (item.subtasks?.reduce((sum, s) => sum + s.time, 0) || 0)\n          )}\n        </Typography>\n      </TableCell>\n\n      {/* Actions */}\n      <TableCell align=\"center\">\n        {!deleteMode ? (\n          <Box sx={{ display: \"flex\", gap: 1, justifyContent: \"center\" }}>\n            {editTaskId === item.id ? (\n              <IconButton onClick={() => handleSaveClick(item)}>\n                <SaveIcon sx={{ fontSize: 36 }} />\n              </IconButton>\n            ) : (\n              <IconButton onClick={() => handleEditClick(item)}>\n                <EditIcon sx={{ fontSize: 36 }} />\n              </IconButton>\n            )}\n            <IconButton onClick={() => startTimer(item.id)}>\n              <AlarmIcon sx={{ fontSize: 36 }} />\n            </IconButton>\n            <IconButton onClick={() => toggleExpand(item.id)}>\n              {expandedTask === item.id ? (\n                <ExpandLessIcon sx={{ fontSize: 36 }} />\n              ) : (\n                <ExpandMoreIcon sx={{ fontSize: 36 }} />\n              )}\n            </IconButton>\n          </Box>\n        ) : (\n          <IconButton\n            sx={{\n              backgroundColor: \"#ffebee\",\n              color: \"#d32f2f\",\n              \"&:hover\": { backgroundColor: \"#ffcdd2\" },\n              transition: \"0.3s ease\",\n              padding: \"10px\",\n            }}\n            aria-label=\"delete task\"\n            onClick={() => deleteItem(item.id)}\n          >\n            <DeleteIcon sx={{ fontSize: 36 }} />\n          </IconButton>\n        )}\n      </TableCell>\n    </TableRow>\n  );\n}\n\n// --- 5) Main component that stitches everything together ---\nexport default function TaskTable({\n  items,\n  deleteMode,\n  deleteItem,\n  startTimer,\n  updateTask,\n  addSubtask,\n  startSubtaskTimer,\n  updateSubtask,\n  deleteSubtask,\n  toggleTaskCompletion,\n  toggleSubtaskCompletion,\n}) {\n  const [editTaskId, setEditTaskId] = useState(null);\n  const [editedTaskName, setEditedTaskName] = useState(\"\");\n  const [expandedTask, setExpandedTask] = useState(null);\n  const [subtaskInput, setSubtaskInput] = useState(\"\");\n  const [editingSubtask, setEditingSubtask] = useState(null);\n  const [editedSubtaskName, setEditedSubtaskName] = useState(\"\");\n\n  // Handlers for editing main tasks\n  const handleEditClick = (task) => {\n    setEditTaskId(task.id);\n    setEditedTaskName(task.name || \"\");\n  };\n  const handleSaveClick = (task) => {\n    const updatedTask = { ...task, name: editedTaskName };\n    updateTask(task.id, updatedTask);\n    setEditTaskId(null);\n  };\n\n  // Expand/collapse\n  const toggleExpand = (taskId) => {\n    setExpandedTask(expandedTask === taskId ? null : taskId);\n  };\n\n  return (\n    <Paper\n      sx={{\n        width: \"100%\",\n        borderRadius: \"12px\",\n        boxShadow: \"0px 6px 15px rgba(0, 0, 0, 0.1)\",\n        background: \"linear-gradient(135deg, #ffffff, #f5f5f5)\",\n        overflow: \"hidden\" // Ensures the inner table is clipped to the rounded corners\n      }}\n    >\n      <TableContainer sx={{ maxHeight: 440, overflowY: \"auto\" }}>\n        <Table\n          stickyHeader\n          aria-label=\"task table\"\n          sx={{\n            borderCollapse: \"collapse\",\n            \"& .MuiTableCell-root\": {\n              borderBottom: \"1px solid #ccc\",\n            },\n          }}\n        >\n          {/* ---- Header ---- */}\n          <TableHead>\n            <TableRow>\n              <TableCell\n                align=\"center\"\n                sx={{\n                  width: \"40%\",\n                  fontWeight: \"bold\",\n                  fontSize: \"1.1rem\",\n                  color: \"#00796b\",\n                }}\n              >\n                Tasks\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{\n                  width: \"20%\",\n                  fontWeight: \"bold\",\n                  fontSize: \"1.1rem\",\n                  color: \"#00796b\",\n                }}\n              >\n                Total Time\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{\n                  width: \"40%\",\n                  fontWeight: \"bold\",\n                  fontSize: \"1.1rem\",\n                  color: \"#00796b\",\n                }}\n              >\n                Actions\n              </TableCell>\n            </TableRow>\n          </TableHead>\n\n          {/* ---- Body ---- */}\n          <TableBody>\n            {items.map((item) => (\n              <React.Fragment key={item.id}>\n                {/* Main row */}\n                <TaskRow\n                  item={item}\n                  editTaskId={editTaskId}\n                  editedTaskName={editedTaskName}\n                  setEditedTaskName={setEditedTaskName}\n                  expandedTask={expandedTask}\n                  deleteMode={deleteMode}\n                  deleteItem={deleteItem}\n                  startTimer={startTimer}\n                  toggleExpand={toggleExpand}\n                  handleEditClick={handleEditClick}\n                  handleSaveClick={handleSaveClick}\n                  updateTask={updateTask}\n                />\n\n                {/* Subtasks section */}\n                <SubtaskSection\n                  item={item}\n                  expandedTask={expandedTask}\n                  deleteMode={deleteMode}\n                  subtaskInput={subtaskInput}\n                  setSubtaskInput={setSubtaskInput}\n                  addSubtask={addSubtask}\n                  editingSubtask={editingSubtask}\n                  setEditingSubtask={setEditingSubtask}\n                  editedSubtaskName={editedSubtaskName}\n                  setEditedSubtaskName={setEditedSubtaskName}\n                  updateSubtask={updateSubtask}\n                  deleteSubtask={deleteSubtask}\n                  toggleSubtaskCompletion={toggleSubtaskCompletion}\n                  startSubtaskTimer={startSubtaskTimer}\n                />\n              </React.Fragment>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}","let lastSentCommand = \"\";\nlet lastSentTime = 0;\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  TextField,\n  Slider,\n  InputAdornment,\n} from \"@mui/material\";\nimport PauseCircleOutlineIcon from \"@mui/icons-material/PauseCircleOutline\";\nimport PlayCircleOutlineIcon from \"@mui/icons-material/PlayCircleOutline\";\nimport confetti from \"canvas-confetti\";\nimport { firestore } from \"./firebase\"; // your firebase config file\nimport { doc, getDoc, updateDoc, setDoc } from \"firebase/firestore\";\nimport { getDatabase, ref, onValue, set } from \"firebase/database\";\nimport app from \"./firebase\";\nimport { getAuth } from \"firebase/auth\";\n\n  export default function Timer({\n    onTimerEnd,\n    initialBreaks,\n    currentTask,\n    currentSubtask,\n    onTimeAdjust, \n    onTriggerMotivation,\n  }) {\n    const [timerMode, setTimerMode] = useState(\"countup\");\n    // For countdown: store the duration in seconds (default 10 minutes)\n    const [countdownDuration, setCountdownDuration] = useState(600);\n    // For count-up mode (time elapsed) and countdown mode (time remaining)\n    const [timeElapsed, setTimeElapsed] = useState(0);\n    // For countdown mode: time remaining\n    const [timeRemaining, setTimeRemaining] = useState(countdownDuration);\n    // whether the timer is running\n    const [timerRunning, setTimerRunning] = useState(false);\n    // timestamp when timer started/resumed\n    const [startTime, setStartTime] = useState(null); \n    // accumulated time from previous sessions\n    const [accumulatedTime, setAccumulatedTime] = useState(0); \n    // whether the task is open\n    const [openTaskDialog, setOpenTaskDialog] = useState(false);\n    // whether the task is pasued\n    const [breaksTaken, setBreaksTaken] = useState(initialBreaks);\n    // whether the task is pasued then display a message\n    const [breakMessage, setBreakMessage] = useState(\"\");\n    // Set submitted to true so that we display the final complete view.\n    const [submitted, setSubmitted] = useState(false);\n    // whether the task is cancaelled - go back to home\n    const [openCancelDialog, setOpenCancelDialog] = useState(false); \n    // handle self-reflection\n    const [reflectAfterClose, setReflectAfterClose] = useState(false);\n    // send command to firebase\n    const auth = getAuth();\n    const user = auth.currentUser;      \n\n  // -- Helpers --\n  const breakMessages = [\n    \"Reconnect your inner voice, do you REALLY need a break?😳\",\n  ];\n\n  // Send command to firebase\n  const sendCommand = (command) => {\n    const now = Date.now();\n    if (command === lastSentCommand && now - lastSentTime < 1000) return;\n\n    lastSentCommand = command;\n    lastSentTime = now;\n\n    const db = getDatabase();\n    set(ref(db, \"/webCommand\"), command);\n  };\n\n  // Handle self-reflection\n  const handleSelfReflect = () => {\n    setReflectAfterClose(true);\n    setOpenTaskDialog(false);\n  };\n\n  // Handle self-reflection for the cancel dialog:\n const handleSelfReflectCancel = () => {\n   setReflectAfterClose(true);\n   setOpenCancelDialog(false);\n };\n\n  // Load audio files for success and failure\n  let wonAudio = new Audio ('https://orteil.dashnet.org/cookieclicker/snd/chime.mp3');\n  let sadAudio = new Audio ('https://www.jedisaber.com/ST/Sounds/STTNG35.WAV')\n\n  // Handle time resume \n  const handleResumeTimer = () => {\n    if (startTime === null) {\n      setStartTime(Date.now());\n      setTimerRunning(true);\n    }\n  };\n\n  const handleCancelFinish = () => {\n    setOpenTaskDialog(false);\n    setOpenCancelDialog(false);\n  };\n\n  // Pause/resume logic \n  const handlePauseResume = () => {\n    if (timerRunning) {\n      if (timerMode === \"countup\") {\n        setAccumulatedTime(timeElapsed);\n      } else if (timerMode === \"countdown\") {\n        const elapsed = countdownDuration - timeRemaining;\n        setAccumulatedTime(elapsed);\n      }\n      setStartTime(null);\n      setTimerRunning(false);\n      setBreaksTaken((prev) => prev + 1);\n      setBreaksTaken((prev) => prev + 1);\n      setBreakMessage(breakMessages[Math.floor(Math.random() * breakMessages.length)]);\n    } else {\n      setStartTime(Date.now());\n      setTimerRunning(true);\n    }\n  };\n\n  // Start the timer and initialize the relevant time variables.\n  const handleStartTimer = () => {\n    setAccumulatedTime(0);\n    if (timerMode === \"countup\") {\n      setTimeElapsed(0);\n    } else if (timerMode === \"countdown\") {\n      setTimeRemaining(countdownDuration);\n    }\n    setStartTime(Date.now());\n    setTimerRunning(true);\n  };\n\n  // When finishing, pass the elapsed time based on mode.\n  const handleFinishTask = async () => {\n    setOpenTaskDialog(false);\n    setTimerRunning(false);\n  \n    const auth = getAuth();\n    const user = auth.currentUser;\n    if (!user) return;\n  \n    const statsUserDocRef = doc(firestore, \"statistics\", user.uid);\n    const statsDefaultDocRef = doc(firestore, \"statistics\", \"default\");\n  \n    const currentElapsed =\n      startTime !== null ? Math.floor((Date.now() - startTime) / 1000) : 0;\n    const elapsedTime =\n      timerMode === \"countup\"\n        ? accumulatedTime + currentElapsed\n        : countdownDuration - timeRemaining;\n  \n    if (currentSubtask) {\n      onTimerEnd(elapsedTime, breaksTaken, {\n        ...currentSubtask,\n        taskId: currentTask.id,\n      });\n    } else {\n      onTimerEnd(elapsedTime, breaksTaken, currentTask);\n    }\n  \n    setStartTime(null);\n  \n    try {\n      // Helper to fetch, add time, and update a doc\n      const updateTimeDoc = async (ref) => {\n        const snap = await getDoc(ref);\n        const previousSeconds = snap.exists()\n          ? parseTimeStringToSeconds(snap.data().totalTimeStudied || \"00:00:00\")\n          : 0;\n  \n        const newTotalTime = previousSeconds + elapsedTime;\n        const hours = Math.floor(newTotalTime / 3600);\n        const minutes = Math.floor((newTotalTime % 3600) / 60);\n        const seconds = newTotalTime % 60;\n        const formattedTime = `${String(hours).padStart(2, \"0\")}:${String(\n          minutes\n        ).padStart(2, \"0\")}:${String(seconds).padStart(2, \"0\")}`;\n  \n        if (snap.exists()) {\n          await updateDoc(ref, { totalTimeStudied: formattedTime });\n        } else {\n          await setDoc(ref, { totalTimeStudied: formattedTime });\n        }\n      };\n  \n      // Update both user and default stats\n      await Promise.all([\n        updateTimeDoc(statsUserDocRef),\n        updateTimeDoc(statsDefaultDocRef)\n      ]);\n  \n      setSubmitted(true);\n    } catch (error) {\n      console.error(\"Error updating stats in Firebase:\", error);\n      alert(\"Error updating stats.\");\n    }\n  };\n\n  // voice command, get command transcription from Firebase then use it to control the timer\n  useEffect(() => {\n    console.log(\"⏳ Setting up Firebase voice listener\");\n\n    const db = getDatabase(app);\n    const commandRef = ref(db, \"/voiceCommand\");\n  \n    const unsubscribe = onValue(commandRef, (snapshot) => {\n      const voiceCommand = snapshot.val();\n      if (!voiceCommand) return;\n  \n      const lower = voiceCommand.toLowerCase().trim();\n      console.log(\"Voice command received:\", lower);\n  \n      // keyword matching from transcription\n      const startKeywords = [\"start\", \"begin\", \"resume\", \"go\", \"play\", \"continue\"];\n      const pauseKeywords = [\"pause\", \"stop\", \"hold\", \"break\", \"take a break\"];\n      const finishKeywords = [\"home\", \"finish\", \"done\", \"go back\", \"end task\"];\n  \n      const matchesKeyword = (command, keywords) =>\n        keywords.some((kw) => command.includes(kw));\n  \n      if (matchesKeyword(lower, pauseKeywords) && timerRunning) {\n        console.log(\"Pausing via voice...\");\n        handlePauseResume();  // Pause\n      } else if (matchesKeyword(lower, startKeywords)) {\n        if (!timerRunning) {\n          if (accumulatedTime > 0 || timeElapsed > 0 || timeRemaining < countdownDuration) {\n            console.log(\"Resuming via voice...\");\n            handleResumeTimer(); // Resume\n          } else {\n            console.log(\"Starting fresh via voice...\");\n            handleStartTimer(); // Start\n          }\n        }\n      } else if (matchesKeyword(lower, finishKeywords)) {\n        console.log(\"Finishing task via voice...\");\n        handleFinishTask();\n      }\n  \n      // Reset to avoid re-triggering\n      set(commandRef, \"\");\n    });\n  \n    return () => unsubscribe();\n  }, [timerRunning, startTime, accumulatedTime, handleResumeTimer, handlePauseResume, handleStartTimer, handleFinishTask]);\n\n  // Update the timer every second when running\n  useEffect(() => {\n    let timerInterval;\n    if (timerRunning && startTime !== null) {\n      timerInterval = setInterval(() => {\n        const elapsed =\n          accumulatedTime + Math.floor((Date.now() - startTime) / 1000);\n        if (timerMode === \"countup\") {\n          setTimeElapsed(elapsed);\n        } else if (timerMode === \"countdown\") {\n          const remaining = countdownDuration - elapsed;\n          if (remaining <= 0) {\n            setTimeRemaining(0);\n            setTimerRunning(false);\n            clearInterval(timerInterval);\n            // End the timer for countdown mode once time runs out\n            onTimerEnd(countdownDuration, breaksTaken, currentSubtask || currentTask);\n          } else {\n            setTimeRemaining(remaining);\n          }\n        }\n      }, 1000);\n    }\n    return () => clearInterval(timerInterval);\n  }, [\n    timerRunning,\n    startTime,\n    accumulatedTime,\n    timerMode,\n    countdownDuration,\n    breaksTaken,\n    currentTask,\n    currentSubtask,\n    onTimerEnd,\n  ]);\n\n  // Format seconds into mm:ss format\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${String(minutes).padStart(2, \"0\")}:${String(remainingSeconds).padStart(2, \"0\")}`;\n  };\n\n  // Function to parse time string in HH:MM:SS or MM:SS format to seconds\n  const parseTimeStringToSeconds = (timeStr) => {\n    const parts = timeStr.split(\":\").map(Number);\n    if (parts.length === 3) {\n      // HH:MM:SS format\n      return parts[0] * 3600 + parts[1] * 60 + parts[2];\n    } else if (parts.length === 2) {\n      // MM:SS format\n      return parts[0] * 60 + parts[1];\n    }\n    return 0;\n  };\n\n  const handleDone = () => {\n    wonAudio.play();\n    confetti();\n    setOpenTaskDialog(true);\n  };\n\n  const handleFail = () => {\n    sadAudio.play();\n    setOpenCancelDialog(true);\n  };\n\n  // -- Render UI --\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        textAlign: \"center\",\n        gap: 3,\n        padding: 3,\n        background: \"linear-gradient(135deg, #e0f7fa, #e0f2f1)\",\n        borderRadius: 3,\n      }}\n    >\n      {/* Timer Mode Selector */}\n      <Box sx={{ display: \"flex\", gap: 2, mb: 2 }}>\n        <Button\n          onClick={() => setTimerMode(\"countup\")}\n          variant={timerMode === \"countup\" ? \"contained\" : \"outlined\"}\n          sx={{\n            textTransform: \"none\",\n            fontWeight: 600,\n            backgroundColor: timerMode === \"countup\" ? \"#00796b\" : \"transparent\",\n            color: timerMode === \"countup\" ? \"#fff\" : \"#00796b\",\n            borderColor: \"#00796b\",\n            \"&:hover\": {\n              backgroundColor: timerMode === \"countup\" ? \"#00695c\" : \"rgba(0,121,107,0.04)\",\n            },\n          }}\n        >\n          Stopwatch ⬆️\n        </Button>\n        <Button\n          onClick={() => setTimerMode(\"countdown\")}\n          variant={timerMode === \"countdown\" ? \"contained\" : \"outlined\"}\n          sx={{\n            textTransform: \"none\",\n            fontWeight: 600,\n            backgroundColor: timerMode === \"countdown\" ? \"#00796b\" : \"transparent\",\n            color: timerMode === \"countdown\" ? \"#fff\" : \"#00796b\",\n            borderColor: \"#00796b\",\n            \"&:hover\": {\n              backgroundColor: timerMode === \"countdown\" ? \"#00695c\" : \"rgba(0,121,107,0.04)\",\n            },\n          }}\n        >\n          Timer ⬇️\n        </Button>\n      </Box>\n\n      {/* For countdown mode: allow custom duration when not running */}\n      {!timerRunning && timerMode === \"countdown\" && (\n        <Box\n          sx={{\n            mb: 2,\n            display: 'flex',\n            alignItems: 'center',\n            gap: 2,\n          }}\n        >\n          {/* Label in your brand green */}\n          <Typography\n            variant=\"subtitle1\"\n            sx={{ fontWeight: 600, color: '#00796b', minWidth: 140 }}\n          >\n            Countdown (min):\n          </Typography>\n\n          {/* Number input with styled border & text */}\n          <TextField\n            type=\"number\"\n            size=\"small\"\n            variant=\"outlined\"\n            inputProps={{\n              min: 0,\n              step: 1,\n              style: { textAlign: 'center' }\n            }}\n            sx={{\n              width: 80,\n              // outline & text in brand green\n              '& .MuiOutlinedInput-root': {\n                '& fieldset': { borderColor: '#00796b' },\n                '&:hover fieldset': { borderColor: '#004d40' },\n                '&.Mui-focused fieldset': { borderColor: '#00796b' },\n              },\n              '& .MuiInputBase-input': {\n                color: '#00796b',\n                fontWeight: 600,\n              }\n            }}\n            value={Math.floor(countdownDuration / 60)}\n            onChange={(e) => {\n              const mins = Math.max(0, Number(e.target.value));\n              const secs = mins * 60;\n              setCountdownDuration(secs);\n              setTimeRemaining(secs);\n            }}\n          />\n        </Box>\n      )}\n\n      {/* Display title: if a subtask is passed, show its name */}\n      <Typography variant=\"h5\" sx={{ fontWeight: 700, color: \"#00796b\" }}>\n        {currentSubtask ? currentSubtask.name : currentTask?.name || \"No Task Selected\"}\n      </Typography>\n\n      {/* Timer Display with Add/Subtract Buttons */}\n      <Box sx={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", gap: 2 }}>\n        {/* Subtract Button */}\n        <IconButton\n          onClick={() => {\n            setTimerRunning(false); // Pause timer\n            if (timerMode === \"countup\") {\n              const diff = -60; // subtract 60 seconds\n              setTimeElapsed((prev) => Math.max(0, prev + diff));\n              setAccumulatedTime((prev) => Math.max(0, prev + diff));\n            } else if (timerMode === \"countdown\") {\n              const diff = -60; // subtract 60 seconds\n              setTimeRemaining((prev) => Math.max(0, prev + diff));\n            }\n          }}\n          sx={{ color: \"#d32f2f\" }}\n        >\n          ➖\n        </IconButton>\n\n        {/* Pause/Resume Button */}\n        <IconButton\n          onClick={() => {\n            if (!timerRunning && timerMode === \"countdown\" && timeRemaining === countdownDuration) {\n              // Fresh countdown start: reset to full duration\n              sendCommand(\"WELL DONE, I'm so proud of you!!\");\n              handleStartTimer();\n            } else {\n              // Either pausing or resuming\n              if (timerRunning) {\n                sendCommand(\"WHY YOU TAKING A BREAK?!\");\n              } else {\n                sendCommand(\"WELL DONE, I'm so proud of you!!\");\n              }\n              handlePauseResume();\n            }\n          }}\n          sx={{ color: \"#00796b\" }}\n        >\n          {timerRunning\n            ? <PauseCircleOutlineIcon sx={{ fontSize: 50 }} />\n            : <PlayCircleOutlineIcon sx={{ fontSize: 50 }} />}\n        </IconButton>\n\n        {/* Timer Display */}\n        <Typography variant=\"h3\" sx={{ fontWeight: \"bold\", color: \"#00796b\" }}>\n          {timerMode === \"countup\" ? formatTime(timeElapsed) : formatTime(timeRemaining)}\n        </Typography>\n\n        {/* Add Button */}\n        <IconButton\n          onClick={() => {\n            setTimerRunning(false); // Pause timer\n            if (timerMode === \"countup\") {\n              const diff = 60; // seconds to add\n              // Update both display and accumulated time\n              setTimeElapsed((prev) => prev + diff);\n              setAccumulatedTime((prev) => prev + diff);\n            } else if (timerMode === \"countdown\") {\n              const diff = 60; // seconds to add\n              setTimeRemaining((prev) => prev + diff);\n            }\n          }}\n          sx={{ color: \"#388e3c\" }}\n        >\n          ➕\n        </IconButton>\n      </Box>\n\n      {/* Display Break Message only when paused */}\n      {!timerRunning &&\n        ((timerMode === \"countup\" && timeElapsed > 0) ||\n          (timerMode === \"countdown\" && timeRemaining < countdownDuration)) && (\n          <Typography variant=\"body1\" sx={{ fontStyle: \"italic\", color: \"#f57c00\", fontWeight: 500, mt: 1 }}>\n            {breakMessage}\n          </Typography>\n        )}\n\n      {/* Timer Actions */}\n      <Box sx={{ display: \"flex\", gap: 2 }}>\n      <Button\n        variant=\"contained\"\n        sx={{\n          backgroundColor: \"#8fbc8f\",\n          color: \"#ffffff\",\n          px: 4,\n          py: 1.5,\n          borderRadius: 2,\n          \"&:hover\": { backgroundColor: \"#228b22\" },\n        }}\n        onClick={() => {\n          sendCommand(\"Well done, you will achieve great things!\");\n          handleDone();\n        }}\n      >\n        Finish Task 🎯\n      </Button>\n    </Box>\n\n    <Box sx={{ display: \"flex\", gap: 2 }}>\n      <Button\n        variant=\"contained\"\n        sx={{\n          backgroundColor: \"#b22222\",\n          color: \"#ffffff\",\n          px: 4,\n          py: 1.5,\n          borderRadius: 2,\n          \"&:hover\": { backgroundColor: \"#8b0000\" },\n        }}\n        onClick={() => {\n          sendCommand(\"UNBELIEVABLE. DO BETTER NEXT TIME.\");\n          handleFail();\n        }}\n      >\n        I'll come back to this task later 👉🏼👈🏼\n      </Button>\n    </Box>\n\n    {/* Task Completion Dialog */}\n    <Dialog\n      open={openTaskDialog}\n      onClose={() => {\n        // Only close the dialog here\n        setOpenTaskDialog(false);\n        handleCancelFinish();\n      }}\n      TransitionProps={{\n        // onExited only fires once the dialog has fully unmounted (after its fade-out)\n        onExited: () => {\n          if (reflectAfterClose) {\n            setReflectAfterClose(false);\n            onTriggerMotivation(); // ← Now runs *after* the dialog is gone\n          }\n        },\n      }}\n    >\n      <DialogTitle>🎉 Great job finishing your task!</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Before moving on:  \n          Your inner voice gets sharper every time you reflect. Let’s level up your focus! 🌟 \n          <br /> \n          Fill out your reflections in the motivational section! 💭\n          <br /> \n          🤓 Complete a quick quiz to earn coins and strengthen your study strategy.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCancelFinish} sx={{ color: \"#00796b\" }}>\n          Cancel 🚫\n        </Button>\n        <Button onClick={handleFinishTask} sx={{ color: \"#00796b\" }}>\n          Back to Home 🏠\n        </Button>\n        <Button onClick={handleSelfReflect} sx={{ color: \"#00796b\", fontWeight: 'bold' }}>\n          Reflect Now ✍️\n        </Button>\n      </DialogActions>\n    </Dialog>\n\n    {/* Task Cancel Dialog */}\n    <Dialog\n      open={openCancelDialog}\n      onClose={() => {\n        // Close the cancel dialog immediately\n        setOpenCancelDialog(false);\n        handleCancelFinish();\n      }}\n      TransitionProps={{\n        // onExited fires only after the dialog has fully unmounted/faded out\n        onExited: () => {\n          if (reflectAfterClose) {\n            setReflectAfterClose(false);\n            onTriggerMotivation(); // Launch MotivationPage after dialog is gone\n          }\n        },\n      }}\n    >\n      <DialogTitle>Oh no 😡</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          If you need to switch up the content, that's okay, just\n          remind yourself of your goals before giving up on this task! 👍\n          <br />\n          Take a moment to reflect and reconnect your inner thoughts, click \"Reflect Now ✍️\"!\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCancelFinish} sx={{ color: \"#00796b\" }}>\n          Cancel 🚫\n        </Button>\n        <Button onClick={handleFinishTask} sx={{ color: \"#00796b\" }}>\n          Back to Home 🙁\n        </Button>\n       <Button onClick={handleSelfReflectCancel} sx={{ color: \"#00796b\", fontWeight: 'bold' }}>\n          Reflect Now ✍️\n        </Button>\n      </DialogActions>\n    </Dialog>\n    </Box>\n  );\n}\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"./firebase\";\n\nconst AuthContext = createContext({ user: null, loading: true });\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {\n      setUser(firebaseUser);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}","import {\n  Box,\n  Button,\n  Typography,\n  Stack,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  Tooltip,\n  Paper,\n} from \"@mui/material\";\nimport TimerIcon from \"@mui/icons-material/Timer\";\nimport FreeBreakfastIcon from \"@mui/icons-material/FreeBreakfast\";\nimport AvgTimeIcon from \"@mui/icons-material/Schedule\";\nimport StarIcon from \"@mui/icons-material/Star\";\nimport HelpOutlineIcon from \"@mui/icons-material/HelpOutline\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip as RechartsTooltip, CartesianGrid, ResponsiveContainer, LineChart, Line } from \"recharts\";\nimport { useAuth } from \"./AuthContext\";\nimport React, { useEffect } from \"react\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport { firestore } from \"./firebase\";\n\nexport default function StatisticsDialog({ open, onClose, totalTimeStudied, breaksTaken, tasks = [] , studyHistory}) {\n  const { user } = useAuth();\n\n  // whenever the user or their totalTimeStudied changes, write to Firestore\n// somewhere at the top of your file\nconst minsToHHMMSS = (totalMins) => {\n  const hours = Math.floor(totalMins / 60);\n  const minutes = totalMins % 60;\n  const seconds = 0; \n  const pad = (n) => String(n).padStart(2, \"0\");\n  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;\n};\n\nuseEffect(() => {\n  if (!user) return;\n  const uploadStats = async () => {\n    try {\n      const statsRef = doc(firestore, \"statistics\", user.uid);\n\n      // convert the raw minutes into HH:MM:SS\n      const formatted = minsToHHMMSS(totalTimeStudied);\n\n      await setDoc(\n        statsRef,\n        { totalTimeStudied: formatted }, // now a string like \"02:15:00\"\n        { merge: true }\n      );\n      console.log(\"✔ Updated totalTimeStudied for\", user.uid, formatted);\n    } catch (err) {\n      console.error(\"✖ Failed to update stats:\", err);\n    }\n  };\n  uploadStats();\n}, [user, totalTimeStudied]);\n\n  if (!open) return null;\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n  \n    return hours > 0 \n      ? `${hours} hr ${remainingMinutes} min` \n      : `${remainingMinutes} min`;\n  };\n\n  const averageTimePerTask = tasks.length > 0 ? Math.floor(totalTimeStudied / tasks.length) : 0;\n\n  const calculateFocusScore = () => {\n    if (totalTimeStudied === 0) return 0;\n    const hoursStudied = totalTimeStudied / 3600;\n    const breaksPerHour = hoursStudied > 0 ? breaksTaken / hoursStudied : 0;\n    const timeScore = Math.min((hoursStudied / 4) * 5, 5);\n    const breakScore =\n      breaksPerHour >= 0.5 && breaksPerHour <= 1.5\n        ? 5\n        : breaksPerHour < 0.5\n        ? breaksPerHour * 10\n        : Math.max(0, 5 - (breaksPerHour - 1.5) * 2);\n\n    return Math.min(Math.max(Math.round((timeScore + breakScore) * 10) / 10, 0), 10);\n  };\n\n  const focusScore = calculateFocusScore();\n\n  // Convert task times into chart data\n  const taskChartData = tasks.map((task) => {\n    const totalTaskTime =\n      task.time +\n      (task.subtasks.reduce((total, subtask) => total + subtask.time, 0) || 0);\n    return { name: task.name, time: Math.round(totalTaskTime / 60) };\n  });\n\n  // Convert study history into chart data format (total time per day)\n  const studyTrends = Object.entries(studyHistory).map(([date, tasksForDay]) => ({\n    date,\n    time: Math.round(\n      Object.values(tasksForDay).reduce((total, taskTime) => total + taskTime, 0) / 60 // Sum all tasks per day\n    ), // Convert seconds to minutes\n  }));\n\n  return (\n      <Box sx={{ \n        width: \"90%\", \n        maxWidth: \"1400px\", \n        margin: \"20px auto\", \n        padding: 4, \n        background: \"linear-gradient(135deg, #e0f7fa 0%, #e0f2f1 100%)\", \n        borderRadius: \"12px\", \n        boxShadow: \"0px 6px 15px rgba(0, 0, 0, 0.1)\" ,\n        justifyContent: \"center\",\n        }}\n      >\n  \n        <Typography variant=\"h4\" sx={{ fontWeight: 700, color: \"#00796b\", textAlign: \"center\", mb: 3 }}>\n          Study Statistics 📊\n        </Typography>\n\n        <Box sx={{ backgroundColor: \"#ffffff\", p: 3, borderRadius: 2, boxShadow: 2, mb: 3 }}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600, textAlign: \"center\", mb: 2, color: \"#004d40\" }}>\n            Overall Statistics\n          </Typography>\n          <Stack spacing={2}>\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent=\"center\">\n              <TimerIcon sx={{ color: \"#00796b\" }} />\n              <Typography variant=\"body1\">Total Time: {formatTime(totalTimeStudied)}</Typography>\n            </Stack>\n\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent=\"center\">\n              <AvgTimeIcon sx={{ color: \"#00796b\" }} />\n              <Typography variant=\"body1\">Avg per Task: {formatTime(averageTimePerTask)}</Typography>\n            </Stack>\n\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent=\"center\">\n              <FreeBreakfastIcon sx={{ color: \"#f57c00\" }} />\n              <Typography variant=\"body1\">Breaks Taken: {breaksTaken}</Typography>\n            </Stack>\n\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent=\"center\">\n              <StarIcon sx={{ color: \"#FFD700\" }} />\n              <Typography variant=\"body1\">Focus Score: {focusScore.toFixed(1)}/10</Typography>\n              <Tooltip title=\"Higher scores mean better study efficiency with optimal breaks.\" arrow>\n                <HelpOutlineIcon sx={{ fontSize: 18, color: \"text.secondary\", cursor: \"help\" }} />\n              </Tooltip>\n            </Stack>\n          </Stack>\n        </Box>\n\n        <Divider sx={{ my: 2 }} />\n\n        <Box sx={{ backgroundColor: \"#ffffff\", p: 3, borderRadius: 2, boxShadow: 2, maxHeight: \"250px\", overflowY: \"auto\" }}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600, textAlign: \"center\", mb: 2, color: \"#004d40\" }}>\n            Time Per Task ⏱️\n          </Typography>\n          <List sx={{ width: \"100%\" }}>\n  {tasks.length > 0 ? (\n    tasks.map((task, index) => {\n      const totalTaskTime =\n        task.time +\n        (task.subtasks.reduce((total, subtask) => total + subtask.time, 0) || 0);\n\n        const dailyTimes = Object.entries(studyHistory)\n        .map(([date, timeByTask]) => {\n          console.log(`Checking date: ${date} for task: ${task.name}`, timeByTask); // Debugging Log\n          return {\n            date,\n            time: timeByTask[task.name] || 0, // Fetch task time from studyHistory\n          };\n        })\n        .filter((entry) => entry.time > 0); // Remove days with 0 study time\n      \n      console.log(`Daily times for ${task.name}:`, dailyTimes); // Debugging Log\n\n      return (\n        <ListItem\n          key={index}\n          sx={{\n            backgroundColor: \"#f5f5f5\",\n            borderRadius: 2,\n            mb: 1,\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n          }}\n        >\n          <ListItemText\n            primary={`${task.name} - ${formatTime(totalTaskTime)}`} // Task Name + Total Time\n            primaryTypographyProps={{ fontWeight: 500 }}\n            secondary={\n              dailyTimes.length > 0 ? (\n                <List sx={{ paddingLeft: 2 }}>\n                  {dailyTimes.map((entry, i) => (\n                    <ListItem key={i} sx={{ paddingY: 0, paddingX: 0 }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {entry.date}: {formatTime(entry.time)}\n                      </Typography>\n                    </ListItem>\n                  ))}\n                </List>\n              ) : (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No daily records available\n                </Typography>\n              )\n            }\n          />\n        </ListItem>\n      );\n    })\n  ) : (\n    <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\">\n      Get Started!\n    </Typography>\n  )}\n</List>\n        </Box>\n\n        <Divider sx={{ my: 3 }} />\n\n        {/* Bar Chart - Study Time Per Task */}\n        <Typography variant=\"h6\" sx={{ fontWeight: 600, textAlign: \"center\", mt: 3, mb: 2, color: \"#004d40\" }}>\n          Study Time Per Task 📊\n        </Typography>\n        <ResponsiveContainer width=\"100%\" height={250}>\n        <BarChart\n          data={taskChartData}\n          // make the SVG’s background white & give it rounded corners\n          style={{ backgroundColor: \"#ffffff\", borderRadius: 8 }}\n          margin={{ top: 20, right: 20, bottom: 20, left: 0 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis label={{ value: \"Minutes\", angle: -90, position: \"insideLeft\" }} />\n          <RechartsTooltip />\n          <Bar dataKey=\"time\" fill=\"#90caf9\" barSize={40} />\n        </BarChart>\n      </ResponsiveContainer>\n\n        {/* Line Chart - Study Trends */}\n        <Typography variant=\"h6\" sx={{ fontWeight: 600, textAlign: \"center\", mt: 3, mb: 2, color: \"#004d40\" }}>\n          Study Trends Over Time 📈\n        </Typography>\n        <ResponsiveContainer width=\"100%\" height={250}>\n        <LineChart\n          data={studyTrends}\n          style={{ backgroundColor: \"#ffffff\", borderRadius: 8 }}\n          margin={{ top: 20, right: 20, bottom: 20, left: 0 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis label={{ value: \"Minutes\", angle: -90, position: \"insideLeft\" }} />\n          <RechartsTooltip />\n          <Line type=\"monotone\" dataKey=\"time\" stroke=\"#f57c00\" strokeWidth={2} />\n        </LineChart>\n      </ResponsiveContainer>\n\n        <Button\n          onClick={onClose}\n          sx={{\n            display: \"block\",\n            mx: \"auto\",               \n            backgroundColor: \"#00796b\",\n            color: \"#ffffff\",\n            mt: 3,\n            px: 4,\n            py: 1.5,\n            borderRadius: 2,\n          }}\n        >\n          Back 🔙\n        </Button>\n    </Box>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Button, Typography, Paper } from \"@mui/material\";\nimport { firestore, auth } from \"./firebase\";\nimport { doc, getDoc, updateDoc, arrayUnion, setDoc } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\nexport default function Shop({ open, onClose }) {\n  const [coins, setCoins] = useState(null);\n  const [user, setUser] = useState(null);\n  const [showTrophies, setShowTrophies] = useState(false);\n  const [trophies, setTrophies] = useState([]);\n\n  const items = [\n    { id: \"motivator\", name: \"Motivator Badge\", cost: 3, emoji: \"🚀\" },\n    { id: \"zenMaster\", name: \"Zen Master\", cost: 4, emoji: \"🧘‍♂️🌸\" },\n    { id: \"goldDuck\", name: \"Golden Duck Trophy\", cost: 5, emoji: \"🦆✨\" },\n    { id: \"taskWizard\", name: \"Task Wizard\", cost: 6, emoji: \"🧙‍♂️📘\" },\n  ];\n\n  const fetchUserData = async () => {\n    if (!user) return;\n    const rawUserId = user.uid;\n    const coinsDocRef = doc(firestore, \"coins\", rawUserId);\n    const trophiesDocRef = doc(firestore, \"trophies\", rawUserId);\n  \n    try {\n      const coinsSnap = await getDoc(coinsDocRef);\n      setCoins(coinsSnap.exists() ? coinsSnap.data().coins : 0);\n  \n      const trophiesSnap = await getDoc(trophiesDocRef);\n      setTrophies(trophiesSnap.exists() ? trophiesSnap.data().items || [] : []);\n    } catch (err) {\n      console.error(\"Error fetching user data:\", err);\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      setUser(currentUser);\n    });\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    if (open && user) {\n      // Fetch coins\n      fetchUserData();\n    }\n  }, [open, user]);\n\n  const spendCoins = async (amount, itemId = null) => {\n    if (!user) return;\n    const rawUserId = user.uid;\n    const coinsDocRef = doc(firestore, \"coins\", rawUserId);\n    const trophiesDocRef = doc(firestore, \"trophies\", rawUserId);\n  \n    try {\n      const docSnap = await getDoc(coinsDocRef);\n      const currentCoins = docSnap.exists() ? docSnap.data().coins || 0 : 0;\n  \n      if (currentCoins >= amount) {\n        await updateDoc(coinsDocRef, { coins: currentCoins - amount });\n  \n        const trophiesSnap = await getDoc(trophiesDocRef);\n        if (!trophiesSnap.exists()) {\n          // Create doc with initial item array\n          await setDoc(trophiesDocRef, { items: [itemId] });\n        } else {\n          // Update existing doc\n          await updateDoc(trophiesDocRef, { items: arrayUnion(itemId) });\n        }\n  \n        setCoins(currentCoins - amount);\n        setTrophies((prev) => [...prev, itemId]);\n        alert(`You bought ${itemId} for ${amount} coins! 🎉`);\n      } else {\n        alert(\"Not enough coins!\");\n      }\n    } catch (error) {\n      console.error(\"Error spending coins:\", error);\n    }\n  };\n\n  const getItemDetails = (id) => items.find((item) => item.id === id);\n\n  if (!open) return null;\n\n  return (\n    <Box sx={{ \n      width: \"90%\", \n      maxWidth: \"1400px\", \n      margin: \"20px auto\", \n      padding: 4, \n      background: \"linear-gradient(135deg, #e0f7fa 0%, #e0f2f1 100%)\", \n      borderRadius: \"12px\", \n      boxShadow: \"0px 6px 15px rgba(0, 0, 0, 0.1)\" ,\n      justifyContent: \"center\",\n      }}\n    >\n        {!showTrophies ? (\n          <>\n            <Typography variant=\"h4\" sx={{ marginBottom: 2, textAlign: \"center\" }}>\n              Spend your Coins! 🛒\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\">\n              {coins > 0 ? (\n                <>\n                  You have <strong>{coins}</strong> {coins === 1 ? \"coin\" : \"coins\"} 🪙\n                </>\n              ) : (\n                <>\n                  No coins for you 😞\n                  <br />\n                  Complete a quiz to earn some! 🤑\n                </>\n              )}\n            </Typography>\n            <Box sx={{ marginTop: 3 }}>\n              {items.map((item) => (\n                <Paper\n                  key={item.id}\n                  elevation={3}\n                  sx={{\n                    marginBottom: 2,\n                    padding: 2,\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    width: \"auto\",\n                    borderRadius: 2, // Rounded corners (8px)\n                    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.08)\", // Soft shadow\n                    background: \"#ffffff\", // Optional: ensures consistent contrast\n                  }}\n                >\n                  <Typography variant=\"body1\">\n                    {item.emoji} {item.name} — {item.cost} coins\n                  </Typography>\n                  <Button\n                    onClick={() => spendCoins(item.cost, item.id)}\n                    disabled={coins === null || coins < item.cost}\n                    sx={{\n                      backgroundColor: \"#f57c00\",\n                      color: \"white\",\n                      \"&:hover\": { backgroundColor: \"#e65100\" },\n                    }}\n                  >\n                    Buy\n                  </Button>\n                </Paper>\n              ))}\n            </Box>\n          </>\n        ) : (\n          <>\n            <Typography variant=\"h4\" sx={{ marginBottom: 2 }}>\n              Trophy Cabinet 🏆\n            </Typography>\n            {trophies.length > 0 ? (\n              <Box sx={{ marginTop: 2 }}>\n                {trophies.map((id) => {\n                  const item = getItemDetails(id);\n                  return (\n                    <Paper\n                      key={id}\n                      elevation={2}\n                      sx={{\n                        marginBottom: 2,\n                        padding: 2,\n                        width: \"90%\",\n                        textAlign: \"left\",\n                      }}\n                    >\n                      <Typography variant=\"h6\">\n                        {item?.emoji || \"🎖️\"} {item?.name || id}\n                      </Typography>\n                    </Paper>\n                  );\n                })}\n              </Box>\n            ) : (\n              <Typography variant=\"body1\">\n                No trophies yet. Earn some by completing tasks! 🎯\n              </Typography>\n            )}\n          </>\n        )}\n\n      <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 1.5, width: \"100%\", alignItems: \"center\", marginTop: 2 }}>\n      <Button\n        onClick={() => setShowTrophies((prev) => !prev)}\n        sx={{\n          backgroundColor: \"#00796b\",\n          color: \"#ffffff\",\n          fontWeight: 600,\n          px: 4,\n          py: 1.5,\n          borderRadius: 2,\n          textTransform: \"none\",\n          width: \"70%\",\n          \"&:hover\": {\n            backgroundColor: \"#00695c\",\n          },\n        }}\n      >\n        {showTrophies ? \"Back to Shop 🛍️\" : \"Trophy Cabinet 🏆\"}\n      </Button>\n\n      <Button\n        onClick={fetchUserData}\n        sx={{\n          backgroundColor: \"#00796b\",\n          color: \"#ffffff\",\n          fontWeight: 600,\n          px: 4,\n          py: 1.5,\n          borderRadius: 2,\n          textTransform: \"none\",\n          width: \"70%\",\n          \"&:hover\": {\n            backgroundColor: \"#00695c\",\n          },\n        }}\n      >\n        🔄 Refresh Coins\n      </Button>\n\n        <Button\n          onClick={onClose}\n          sx={{\n            backgroundColor: \"#00796b\",\n            color: \"#ffffff\",\n            fontWeight: 600,\n            px: 4,\n            py: 1.5,\n            borderRadius: 2,\n            textTransform: \"none\",\n            \"&:hover\": {\n              backgroundColor: \"#00695c\",\n            },\n          }}\n        >\n          Back to tasks ⏮️\n        </Button>\n      </Box>\n    </Box>\n  );\n}","import React, { useState } from \"react\";\nimport { Box, TextField, Button, Paper } from \"@mui/material\";\n\nexport default function AddText({ addItem }) {\n  const [input, setInput] = useState(\"\");\n\n  const handleAdd = () => {\n    if (input.trim()) {\n      addItem(input.trim());\n      setInput(\"\");\n    }\n  };\n\n  // Handle Enter key press\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleAdd();\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        // center \n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        margin: \"0 auto\",\n      }}\n    >\n      <Paper\n        elevation={6}\n        sx={{\n          padding: \"20px\",\n          borderRadius: \"12px\",\n          width: \"55%\", // or \"100%\" if you want full width\n          background: \"linear-gradient(135deg, #ffffff, #f5f5f5)\",\n          boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.1)\",\n          textAlign: \"center\",\n        }}\n      >\n        <TextField\n          id=\"task-input\"\n          label=\"Enter Task\"\n          variant=\"outlined\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={handleKeyDown}\n          fullWidth\n          sx={{\n            backgroundColor: \"#ffffff\",\n            borderRadius: \"8px\",\n            \"& .MuiOutlinedInput-root\": {\n              borderRadius: \"8px\",\n            },\n          }}\n        />\n\n        <Button\n          variant=\"contained\"\n          onClick={handleAdd}\n          sx={{\n            backgroundColor: \"#00796b\",\n            color: \"#ffffff\",\n            fontWeight: 600,\n            mt: 2,\n            px: 4,\n            py: 1.5,\n            borderRadius: \"8px\",\n            textTransform: \"none\",\n            \"&:hover\": {\n              backgroundColor: \"#00695c\",\n            },\n          }}\n        >\n          Add Task ＋\n        </Button>\n      </Paper>\n    </Box>\n  );\n}","import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Typography,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormControl,\n  FormLabel,\n  Paper,\n  Divider,\n  Stack,\n} from \"@mui/material\";\n\n// Function to determine the study method based on user preferences and study data\nconst determineStudyMethod = ({\n  totalTimeStudied,\n  breaksTaken,\n  tasks,\n  prefersRepetition,\n  prefersLongBlocks,\n  prefersFrequentIntervals,\n  prefersWriting,\n}) => {\n  const breaksPerHour = totalTimeStudied > 0 ? breaksTaken / (totalTimeStudied / 3600) : 0;\n  const averageTimePerTask = tasks.length > 0 ? Math.floor(totalTimeStudied / tasks.length) : 0;\n\n  let method = \"\";\n\n  if (totalTimeStudied < 30 * 60) {\n    method = prefersRepetition === \"yes\" ? \"Active Recall 🤓\" : \"Flashcards 🃏\";\n  } else if (totalTimeStudied <= 120 * 60) {\n    method = prefersFrequentIntervals === \"yes\" ? \"Pomodoro (25-5 or 50-10) 🍅\" : \"Pomodoro Technique 🍅\";\n  } else {\n    method = prefersLongBlocks === \"yes\" ? \"Deep Work (90-min focus blocks) 💪\" : \"Spaced Repetition 🔄\";\n  }\n\n  if (breaksPerHour < 1) {\n    method += \" with short, focused sessions ✨\";\n  } else if (breaksPerHour <= 2) {\n    method += \" with balanced breaks ⚖️\";\n  } else {\n    method += prefersLongBlocks === \"yes\" ? \" and long reviews 📚\" : \" with interleaving 🔀\";\n  }\n\n  if (averageTimePerTask < 10) {\n    method += \" and quick reviews ⚡\";\n  } else if (averageTimePerTask <= 30) {\n    method += prefersWriting === \"yes\" ? \" plus Cornell note-taking 📝\" : \" plus mixed practice 🔄\";\n  } else {\n    method += totalTimeStudied > 120 * 60 ? \" with deep focus sessions 🎯\" : \" with thorough reviews 🎯\";\n  }\n\n  return method;\n};\n\nexport default function StudyMethod({ open, onClose, totalTimeStudied, breaksTaken, tasks, onSubmit }) {\n  const [preferences, setPreferences] = useState({\n    prefersRepetition: \"no\",\n    prefersLongBlocks: \"yes\",\n    prefersFrequentIntervals: \"yes\",\n    prefersWriting: \"no\",\n  });\n\n  const [recommendedMethod, setRecommendedMethod] = useState(\"\");\n\n  useEffect(() => {\n    const method = determineStudyMethod({ totalTimeStudied, breaksTaken, tasks, ...preferences });\n    setRecommendedMethod(method);\n  }, [preferences, totalTimeStudied, breaksTaken, tasks]);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setPreferences((prevPreferences) => ({\n      ...prevPreferences,\n      [name]: value,\n    }));\n  };\n\n  if (!open) return null;\n\n  return (\n    <Box sx={{ \n      width: \"90%\", \n      maxWidth: \"1400px\", \n      margin: \"20px auto\", \n      padding: 4, \n      background: \"linear-gradient(135deg, #e0f7fa 0%, #e0f2f1 100%)\", \n      borderRadius: \"12px\", \n      boxShadow: \"0px 6px 15px rgba(0, 0, 0, 0.1)\" ,\n      justifyContent: \"center\",\n      }}\n    >\n        {/* Title */}\n        <Typography\n          variant=\"h4\"\n          sx={{\n            fontWeight: 700,\n            color: \"#00796b\",\n            textAlign: \"center\",\n            mb: 3,\n          }}\n        >\n          Study Preferences 🎓\n        </Typography>\n\n        {/* Preferences Form */}\n        <Box\n          sx={{\n            backgroundColor: \"#ffffff\",\n            p: 3,\n            borderRadius: 2,\n            boxShadow: 2,\n            mb: 3,\n          }}\n        >\n          <Stack spacing={3}>\n            <FormControl component=\"fieldset\">\n              <FormLabel\n                component=\"legend\"\n                sx={{ fontWeight: 600, color: \"#004d40\", mb: 1 }}\n              >\n                Do you prefer to repeat content (Active Recall) or use flashcards?\n              </FormLabel>\n              <RadioGroup row name=\"prefersRepetition\" value={preferences.prefersRepetition} onChange={handleChange}>\n                <FormControlLabel value=\"yes\" control={<Radio sx={{ color: \"#00796b\" }} />} label=\"Repeat Content\" />\n                <FormControlLabel value=\"no\" control={<Radio sx={{ color: \"#00796b\" }} />} label=\"Flashcards\" />\n              </RadioGroup>\n            </FormControl>\n\n            <FormControl component=\"fieldset\">\n              <FormLabel component=\"legend\" sx={{ fontWeight: 600, color: \"#004d40\", mb: 1 }}>\n                Do you prefer long study blocks or frequent intervals?\n              </FormLabel>\n              <RadioGroup row name=\"prefersLongBlocks\" value={preferences.prefersLongBlocks} onChange={handleChange}>\n                <FormControlLabel value=\"yes\" control={<Radio sx={{ color: \"#00796b\" }} />} label=\"Long Blocks\" />\n                <FormControlLabel value=\"no\" control={<Radio sx={{ color: \"#00796b\" }} />} label=\"Frequent Intervals\" />\n              </RadioGroup>\n            </FormControl>\n\n            <FormControl component=\"fieldset\">\n              <FormLabel component=\"legend\" sx={{ fontWeight: 600, color: \"#004d40\", mb: 1 }}>\n                Do you prefer writing or reading during study sessions?\n              </FormLabel>\n              <RadioGroup row name=\"prefersWriting\" value={preferences.prefersWriting} onChange={handleChange}>\n                <FormControlLabel value=\"yes\" control={<Radio sx={{ color: \"#00796b\" }} />} label=\"Writing\" />\n                <FormControlLabel value=\"no\" control={<Radio sx={{ color: \"#00796b\" }} />} label=\"Reading\" />\n              </RadioGroup>\n            </FormControl>\n          </Stack>\n        </Box>\n\n        {/* Divider */}\n        <Divider sx={{ my: 2 }} />\n\n        {/* Recommended Study Method - Scrollable */}\n        <Box\n          sx={{\n            backgroundColor: \"#ffffff\",\n            p: 3,\n            borderRadius: 2,\n            boxShadow: 2,\n            maxHeight: \"150px\",\n            overflowY: \"auto\",\n          }}\n        >\n          <Typography variant=\"h6\" sx={{ fontWeight: 600, color: \"#004d40\", textAlign: \"center\", mb: 2 }}>\n            Recommended Study Method:\n          </Typography>\n          <Typography\n            variant=\"body1\"\n            sx={{\n              fontStyle: \"italic\",\n              color: \"#004d40\",\n              fontSize: \"1.1rem\",\n              textAlign: \"center\",\n            }}\n          >\n            {recommendedMethod}\n          </Typography>\n        </Box>\n\n        {/* Divider */}\n        <Divider sx={{ my: 3 }} />\n\n        {/* Back Button */}\n        <Box sx={{ textAlign: \"center\" }}>\n          <Button\n            onClick={onClose}\n            sx={{\n              backgroundColor: \"#00796b\",\n              color: \"#ffffff\",\n              fontWeight: 600,\n              px: 4,\n              py: 1.5,\n              borderRadius: 2,\n              textTransform: \"none\",\n              \"&:hover\": {\n                backgroundColor: \"#00695c\",\n              },\n            }}\n          >\n            Back 🏡\n          </Button>\n        </Box>\n    </Box>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Button, Typography, Paper, TextField, IconButton } from \"@mui/material\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport { Tooltip } from \"@mui/material\";\n\nconst defaultQuotes = [\n  \"Your potential is endless. Go do what you were created to do. 💡\",\n  \"Don't limit your challenges. Challenge your limits. 🚀\",\n  \"It’s okay to rest, but don’t quit. Keep going. 🌟\",\n  \"Your only limit is your mind. Change your thoughts, change your life. 💭\",\n  \"Believe in yourself and your ability to succeed. 💪\",\n];\n\nexport default function MotivationPage({ onClose, addItem }) {\n  const [quoteIndex, setQuoteIndex] = useState(0);\n\n  // We'll initialize these from localStorage or fall back to defaults.\n  const [quotes, setQuotes] = useState([]);\n  const [selfQuestions, setSelfQuestions] = useState([]);\n  const [newQuote, setNewQuote] = useState(\"\");\n  const [selfQuestionInput, setSelfQuestionInput] = useState(\"\");\n  const [editingIndex, setEditingIndex] = useState(null);\n  const [editedReflectionText, setEditedReflectionText] = useState(\"\");\n\n  // read local storage for quotes & reflections\n  useEffect(() => {\n    // Try to read quotes from localStorage\n    const storedQuotes = localStorage.getItem(\"motivationQuotes\");\n    if (storedQuotes) {\n      setQuotes(JSON.parse(storedQuotes));\n    } else {\n      // If none stored, use default quotes\n      setQuotes(defaultQuotes);\n    }\n\n    // Try to read reflections from localStorage\n    const storedReflections = localStorage.getItem(\"motivationSelfReflections\");\n    if (storedReflections) {\n      setSelfQuestions(JSON.parse(storedReflections));\n    } else {\n      setSelfQuestions([]);\n    }\n  }, []);\n\n  // Whenever quotes change, store them\n  useEffect(() => {\n    localStorage.setItem(\"motivationQuotes\", JSON.stringify(quotes));\n  }, [quotes]);\n\n  // Whenever selfQuestions change, store them\n  useEffect(() => {\n    localStorage.setItem(\"motivationSelfReflections\", JSON.stringify(selfQuestions));\n  }, [selfQuestions]);\n\n  // Handlers for quotes\n  const handleAddQuote = () => {\n    if (newQuote.trim()) {\n      setQuotes((prev) => [...prev, newQuote.trim()]);\n      setNewQuote(\"\");\n    }\n  };\n\n  const handleDeleteQuote = (index) => {\n    const updated = quotes.filter((_, i) => i !== index);\n    setQuotes(updated);\n    if (quoteIndex >= updated.length) setQuoteIndex(0); // Reset index if needed\n  };\n\n  const nextQuote = () => {\n    setQuoteIndex((prevIndex) => (prevIndex + 1) % quotes.length);\n  };\n\n  // Handlers for self reflections\n  const handleSelfQuestionSave = () => {\n    if (selfQuestionInput.trim() !== \"\") {\n      const timestamp = new Date().toLocaleString();\n      const newReflection = {\n        text: selfQuestionInput,\n        timestamp,\n      };\n      setSelfQuestions((prev) => [...prev, newReflection]);\n      setSelfQuestionInput(\"\");\n    }\n  };\n\n  const handleSelfQuestionKeyDown = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSelfQuestionSave();\n    }\n  };\n\n  // Edit reflection handlers\n  const handleEditReflection = (index) => {\n    setEditingIndex(index);\n    setEditedReflectionText(selfQuestions[index].text);\n  };\n\n  const handleCancelReflection = () => {\n    setEditingIndex(null);\n    setEditedReflectionText(\"\");\n  };\n\n  const handleSaveReflection = (index) => {\n    const updatedReflections = [...selfQuestions];\n    updatedReflections[index] = {\n      ...updatedReflections[index],\n      text: editedReflectionText,\n      timestamp: new Date().toLocaleString(), // update timestamp upon editing\n    };\n    setSelfQuestions(updatedReflections);\n    setEditingIndex(null);\n    setEditedReflectionText(\"\");\n  };\n\n  const handleDeleteReflection = (index) => {\n    const updatedReflections = selfQuestions.filter((_, i) => i !== index);\n    setSelfQuestions(updatedReflections);\n  };\n\n  const handleResetQuotes = () => {\n    setQuotes(defaultQuotes);\n    setQuoteIndex(0);\n    localStorage.setItem(\"motivationQuotes\", JSON.stringify(defaultQuotes));\n  };\n\n  return (\n    <Box sx={{ \n      width: \"90%\", \n      maxWidth: \"1400px\", \n      margin: \"20px auto\", \n      padding: 4, \n      background: \"linear-gradient(135deg, #e0f7fa 0%, #e0f2f1 100%)\", \n      borderRadius: \"12px\", \n      boxShadow: \"0px 6px 15px rgba(0, 0, 0, 0.1)\" ,\n      justifyContent: \"center\",\n      }}\n    >\n        <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", mb: 2, textAlign: \"center\" }}>\n          ✨ Motivational Boost ✨\n        </Typography>\n\n        {/* Display Current Quote */}\n        <Typography variant=\"h6\" sx={{ fontStyle: \"italic\", mb: 1 , textAlign: \"center\" }}>\n          {quotes[quoteIndex]}\n        </Typography>\n\n        {/* Buttons for Next & Delete */}\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            gap: 1,\n            mb: 2,\n          }}\n        >\n          <Button\n            variant=\"contained\"\n            onClick={nextQuote}\n            sx={{ backgroundColor: \"#CE93D8\", color: \"#FFFFFF\" }}\n          >\n            Next Quote 🔄\n          </Button>\n           {/* Delete */} \n          <Tooltip title=\"Delete Current Quote\">\n          <IconButton onClick={() => handleDeleteQuote(quoteIndex)} size=\"small\">\n            <DeleteIcon fontSize=\"large\" />\n          </IconButton>\n          </Tooltip>\n          {/* Refresh */}\n          <Tooltip title=\"Refresh Quotes\">\n            <IconButton\n              onClick={handleResetQuotes}\n              size=\"small\"\n              sx={{\n                color: \"#CE93D8\",\n                \"&:hover\": {\n                  color: \"#ab47bc\",\n                },\n              }}\n            >\n              <RefreshIcon fontSize=\"large\" />\n            </IconButton>\n          </Tooltip>\n        </Box>\n\n        {/* Add a new Quote */}\n        <TextField\n          label=\"Add your own motivational quote\"\n          variant=\"outlined\"\n          fullWidth\n          multiline\n          rows={2}\n          value={newQuote}\n          onChange={(e) => setNewQuote(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" && !e.shiftKey) {\n              e.preventDefault();\n              handleAddQuote();\n            }\n          }}\n          sx={{\n            \"& .MuiOutlinedInput-root\": {\n              \"&.Mui-focused fieldset\": {\n                borderColor: \"#088F8F\",\n              },\n            },\n            \"& .MuiInputLabel-root.Mui-focused\": {\n              color: \"#088F8F\",\n            },\n          }}\n        />\n\n        <Button\n          variant=\"contained\"\n          onClick={handleAddQuote}\n          sx={{\n            display: \"block\",     \n            mx: \"auto\",         \n            backgroundColor: \"#aed581\",\n            mt: 1,\n            mb: 2,\n          }}\n        >\n          Add Quote ✍️\n        </Button>\n\n        {/* Self Reflection Section */}\n        <Box sx={{ mt: 4, justifyContent: \"center\", textAlign: \"center\" }}>\n          <Typography variant=\"h6\" sx={{ fontWeight: \"bold\", mb: 1 }}>\n            Self Reflection 🤔\n          </Typography>\n\n          <TextField\n            label=\"Enter your thought or question\"\n            variant=\"outlined\"\n            fullWidth\n            multiline\n            rows={2}\n            value={selfQuestionInput}\n            onChange={(e) => setSelfQuestionInput(e.target.value)}\n            onKeyDown={handleSelfQuestionKeyDown}\n            sx={{\n              \"& .MuiOutlinedInput-root\": {\n                \"&.Mui-focused fieldset\": {\n                  borderColor: \"#088F8F\",\n                },\n              },\n              \"& .MuiInputLabel-root.Mui-focused\": {\n                color: \"#088F8F\",\n              },\n            }}\n          />\n\n          <Button\n            variant=\"contained\"\n            onClick={handleSelfQuestionSave}\n            sx={{ backgroundColor: \"#90caf9\", mt: 2, mb: 2, justifyContent: \"center\" }}\n          >\n            Save Reflection 📝\n          </Button>\n\n          <Paper\n            elevation={3}\n            sx={{\n              height: \"auto\",\n              overflowY: \"auto\",\n              padding: 2,\n              textAlign: \"left\",\n              width: \"auto\",\n              margin: \"0 auto\",\n            }}\n          >\n            {selfQuestions.length > 0 ? (\n              selfQuestions.map((reflection, index) => (\n                <Box\n                  key={index}\n                  sx={{\n                    mb: 1,\n                    borderBottom: \"1px solid #ccc\",\n                    paddingBottom: \"4px\",\n                  }}\n                >\n                  {editingIndex === index ? (\n                    <>\n                      <TextField\n                        value={editedReflectionText}\n                        onChange={(e) =>\n                          setEditedReflectionText(e.target.value)\n                        }\n                        fullWidth\n                        multiline\n                      />\n                      <Box sx={{ mt: 1 }}>\n                        <Button\n                          onClick={() => handleSaveReflection(index)}\n                          variant=\"contained\"\n                          size=\"small\"\n                          sx={{ mr: 1 }}\n                        >\n                          Save\n                        </Button>\n                        <Button\n                          onClick={handleCancelReflection}\n                          variant=\"outlined\"\n                          size=\"small\"\n                        >\n                          Cancel\n                        </Button>\n                      </Box>\n                    </>\n                  ) : (\n                    <>\n                    <Paper\n                    elevation={2}\n                    sx={{\n                      p: 2,\n                      borderRadius: 2,\n                      mb: 1,\n                      background: \"#ffffff\",\n                      boxShadow: \"0px 2px 8px rgba(0, 0, 0, 0.06)\"\n                    }}\n                  >\n                    <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\",maxHeight: \"300px\" }}>\n                      <Box>\n                        <Typography variant=\"body1\" sx={{ mb: 0.5 }}>\n                          {reflection.text}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {reflection.timestamp}\n                        </Typography>\n                      </Box>\n                      <Box>\n                        <IconButton onClick={() => handleEditReflection(index)} size=\"small\">\n                          <EditIcon fontSize=\"small\" />\n                        </IconButton>\n                        <IconButton onClick={() => handleDeleteReflection(index)} size=\"small\">\n                          <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                      </Box>\n                    </Box>\n                  </Paper>\n                    </>\n                  )}\n                </Box>\n              ))\n            ) : (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                No self reflections saved.\n              </Typography>\n            )}\n          </Paper>\n        </Box>\n\n        <Button\n          variant=\"contained\"\n          onClick={onClose}\n          sx={{\n            display: \"block\",    \n            mx: \"auto\",          \n            backgroundColor: \"#088F8F\",\n            mt: 2,\n            mb: 2,\n          }}\n        >\n          Back To Tasks 📚\n        </Button>\n    </Box>\n  );\n}","import React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n\nexport default function Bar() {\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\" sx={{ backgroundColor: \"#088F8F\" }}>\n        <Toolbar>\n          <Typography variant=\"h4\" sx={{ fontWeight: \"bold\", color: \"white\" }}>\n            Mind My Mind\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  );\n}","// Main task management interface and logic\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Typography, IconButton, Divider, Tooltip } from \"@mui/material\";\nimport TaskTable from \"./TaskTable\";\nimport Timer from \"./timer\";\nimport StatisticsDialog from \"./StatisticsDialog\";\nimport Shop from \"./Shop\";\nimport AddText from \"./Enter_Text\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport DoneIcon from \"@mui/icons-material/Done\";\nimport ShoppingCartIcon from \"@mui/icons-material/ShoppingCart\";\nimport BarChartIcon from \"@mui/icons-material/BarChart\";\nimport LibraryBooksIcon from \"@mui/icons-material/LibraryBooks\";\nimport StudyMethod from \"./StudyMethod\";\nimport MotivationPage from \"./motivation\";\nimport SelfImprovementIcon from \"@mui/icons-material/SelfImprovement\";\nimport AppBar from \"./AppBar\";\nimport { useAuth } from \"./AuthContext\";\nimport { getDatabase, ref, onValue, set } from \"firebase/database\"; \nimport stringSimilarity from \"string-similarity\"; \n\nexport default function List() {\n  const { user } = useAuth(); // Get the logged-in user\n\n  // Task state, loaded from localStorage on first render\n  const [items, setItems] = useState(() => {\n    const saved = localStorage.getItem(\"taskItems\");\n    return saved ? JSON.parse(saved) : [{ id: 1, name: \"Get Started!\", time: 0, subtasks: [] }];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"taskItems\", JSON.stringify(items));\n  }, [items]);\n\n  // UI state toggles\n  const [deleteMode, setDeleteMode] = useState(false);\n  const [timerActive, setTimerActive] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [statisticsActive, setStatisticsActive] = useState(false);\n  const [shopActive, setShopActive] = useState(false);\n  const [bookActive, setBookActive] = useState(false);\n  const [motivationActive, setMotivationActive] = useState(false);\n  const [isShopOpen, setIsShopOpen] = useState(true);\n\n  // Tracking breaks and history across sessions\n  const [breaksTaken, setBreaksTaken] = useState(() => {\n    const saved = localStorage.getItem(\"breaksTaken\");\n    return saved ? JSON.parse(saved) : 0;\n  });\n  const [studyHistory, setStudyHistory] = useState(() => {\n    const saved = localStorage.getItem(\"studyHistory\");\n    return saved ? JSON.parse(saved) : {};\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"breaksTaken\", JSON.stringify(breaksTaken));\n  }, [breaksTaken]);\n  useEffect(() => {\n    localStorage.setItem(\"studyHistory\", JSON.stringify(studyHistory));\n  }, [studyHistory]);\n\n  // Create a new task\n  const addItem = (newItem) => {\n    setItems((prev) => [...prev, { id: Date.now(), name: newItem, time: 0, subtasks: [] }]);\n  };\n\n  // Delete task or subtask\n  const deleteItem = (id) => setItems((prev) => prev.filter((item) => item.id !== id));\n  const deleteSubtask = (taskId, subtaskId) => {\n    setItems((prev) =>\n      prev.map((task) =>\n        task.id === taskId\n          ? { ...task, subtasks: task.subtasks.filter((s) => s.id !== subtaskId) }\n          : task\n      )\n    );\n  };\n\n  // Toggle delete mode\n  const toggleDeleteMode = () => setDeleteMode((prev) => !prev);\n\n  // Start timer handlers for tasks and subtasks\n  const startTimer = (taskId) => {\n    setCurrentTaskId(taskId);\n    setTimerActive(true);\n    setStatisticsActive(false);\n    setShopActive(false);\n  };\n  const startSubtaskTimer = (taskId, subtaskId) => {\n    setCurrentTaskId({ taskId, subtaskId });\n    setTimerActive(true);\n  };\n\n  // Task/subtask editing logic\n  const updateTask = (taskId, updatedTask) => {\n    setItems((prev) => prev.map((t) => (t.id === taskId ? { ...t, ...updatedTask } : t)));\n  };\n  const updateSubTask = (taskId, subtaskId, newName) => {\n    setItems((prev) =>\n      prev.map((task) =>\n        task.id === taskId\n          ? {\n              ...task,\n              subtasks: task.subtasks.map((s) => (s.id === subtaskId ? { ...s, name: newName } : s)),\n            }\n          : task\n      )\n    );\n  };\n\n  // Add a new subtask to a task\n  const addSubtask = (taskId, name) => {\n    const newSubtask = { id: Date.now(), name, time: 0 };\n    setItems((prev) =>\n      prev.map((task) => (task.id === taskId ? { ...task, subtasks: [...task.subtasks, newSubtask] } : task))\n    );\n  };\n\n  // Handle timer completion for tasks and subtasks\n  const handleTimerEnd = (timeElapsed, newBreaks, completed) => {\n    setTimerActive(false);\n    setBreaksTaken(newBreaks);\n    setCurrentTaskId(null);\n\n    const today = new Date().toLocaleDateString(\"en-GB\", { weekday: \"long\", day: \"numeric\", month: \"short\" });\n\n    setStudyHistory((prev) => ({\n      ...prev,\n      [today]: {\n        ...(prev[today] || {}),\n        [completed.name]: (prev[today]?.[completed.name] || 0) + timeElapsed,\n      },\n    }));\n\n    if (completed.taskId) {\n      setItems((prev) =>\n        prev.map((task) =>\n          task.id === completed.taskId\n            ? {\n                ...task,\n                subtasks: task.subtasks.map((s) =>\n                  s.id === completed.id ? { ...s, time: s.time + timeElapsed } : s\n                ),\n              }\n            : task\n        )\n      );\n    } else {\n      setItems((prev) =>\n        prev.map((t) => (t.id === completed.id ? { ...t, time: t.time + timeElapsed } : t))\n      );\n    }\n  };\n\n  // Mark task/subtask complete\n  const toggleTaskCompletion = (taskId) => {\n    setItems((prev) =>\n      prev.map((task) => (task.id === taskId ? { ...task, completed: !task.completed } : task))\n    );\n  };\n  const toggleSubtaskCompletion = (taskId, subId) => {\n    setItems((prev) =>\n      prev.map((task) =>\n        task.id === taskId\n          ? {\n              ...task,\n              subtasks: task.subtasks.map((s) =>\n                s.id === subId ? { ...s, completed: !s.completed } : s\n              ),\n            }\n          : task\n      )\n    );\n  };\n\n  // Manual time adjustment\n  const handleTimeAdjust = (delta, adjustedTask) => {\n    if (delta === 0) return;\n\n    const today = new Date().toLocaleDateString(\"en-GB\", { weekday: \"long\", day: \"numeric\", month: \"short\" });\n\n    setStudyHistory((prev) => ({\n      ...prev,\n      [today]: {\n        ...(prev[today] || {}),\n        [adjustedTask.name]: Math.max(0, (prev[today]?.[adjustedTask.name] || 0) + delta),\n      },\n    }));\n\n    setItems((prev) =>\n      prev.map((item) =>\n        item.id === adjustedTask.id ? { ...item, time: Math.max(0, item.time + delta) } : item\n      )\n    );\n  };\n\n  const getTotalTimeStudied = () => {\n    return items.reduce((total, task) => {\n      const subtaskTime = task.subtasks.reduce((subTotal, sub) => subTotal + sub.time, 0);\n      return total + task.time + subtaskTime;\n    }, 0);\n  };\n\n  useEffect(() => {\n    const db = getDatabase();\n    const commandRef = ref(db, \"/voiceCommand\");\n  \n    const unsubscribe = onValue(commandRef, (snapshot) => {\n      const voiceCommand = snapshot.val();\n      if (!voiceCommand) return;\n  \n      const lower = voiceCommand.toLowerCase().trim();\n      console.log(\"🎤 Voice command received:\", lower);\n  \n      // === Keyword sets ===\n      const statsKeywords = [\"statistics\", \"stats\"];\n      const shopKeywords = [\"shop\", \"coins\", \"spend\"];\n      const methodKeywords = [\"study methods\", \"methods\", \"learning advice\"];\n      const motivationKeywords = [\"motivation\", \"motivational\", \"motivational boost\", \"inner voice\", \"motivate\"];\n      const backKeywords = [\"go back\", \"home\", \"exit\", \"close\", \"back\"];\n      const navVerbs = [\"go\", \"open\", \"show\", \"navigate\", \"access\"];\n  \n      const matchesKeyword = (command, keywords) =>\n        keywords.some((kw) => command.includes(kw));\n  \n      const matchesNavigation = (command, keywords) =>\n        navVerbs.some((v) => command.includes(v)) &&\n        keywords.some((kw) => command.includes(kw));\n  \n      // === Start task or subtask ===\n      const subtaskMatch = lower.match(/^(start|begin|resume|go|play)\\s+(.+)\\s+under\\s+(.+)$/i);\n      const taskOnlyMatch = lower.match(/^(start|begin|resume|go|play)\\s+(.+)$/i);\n  \n      if (subtaskMatch) {\n        const subtaskSpoken = subtaskMatch[2].trim();\n        const taskSpoken = subtaskMatch[3].trim();\n  \n        const taskNames = items.map((t) => t.name.toLowerCase());\n        const taskResult = stringSimilarity.findBestMatch(taskSpoken, taskNames);\n        const parentTask = items[taskResult.bestMatchIndex];\n  \n        if (taskResult.bestMatch.rating > 0.5 && parentTask.subtasks.length > 0) {\n          const subtaskNames = parentTask.subtasks.map((s) => s.name.toLowerCase());\n          const subtaskResult = stringSimilarity.findBestMatch(subtaskSpoken, subtaskNames);\n          const matchedSubtask = parentTask.subtasks[subtaskResult.bestMatchIndex];\n  \n          if (subtaskResult.bestMatch.rating > 0.5) {\n            console.log(`✅ Starting subtask: \"${matchedSubtask.name}\" under \"${parentTask.name}\"`);\n            startSubtaskTimer(parentTask.id, matchedSubtask.id);\n          } else {\n            console.warn(`⚠️ Subtask \"${subtaskSpoken}\" not found under \"${parentTask.name}\"`);\n          }\n        } else {\n          console.warn(`⚠️ No matching parent task found for: \"${taskSpoken}\"`);\n        }\n  \n      } else if (taskOnlyMatch) {\n        const spokenTaskName = taskOnlyMatch[2].trim();\n        const lowerCommand = spokenTaskName.toLowerCase();\n      \n        // 1) Try a direct substring match against any task name\n        const direct = items.find(\n          (t) => lowerCommand.includes(t.name.toLowerCase())\n        );\n        if (direct) {\n          console.log(`✅ Direct match starting task \"${direct.name}\"`);\n          return startTimer(direct.id);\n        }\n      \n        // 2) Fallback to fuzzy matching\n        const taskNames = items.map((t) => t.name.toLowerCase());\n        const { bestMatch, bestMatchIndex } =\n          stringSimilarity.findBestMatch(lowerCommand, taskNames);\n      \n        if (bestMatch.rating > 0.3) {\n          const matchedTask = items[bestMatchIndex];\n          console.log(`✅ Fuzzy match starting task \"${matchedTask.name}\"`);\n          startTimer(matchedTask.id);\n        } else {\n          console.warn(`⚠️ No matching task found for: \"${spokenTaskName}\"`);\n        }\n      }\n  \n      // === Add/Delete task/subtask ===\n      const addTaskMatch = lower.match(/^add\\s+(.+)$/i);\n      const deleteTaskMatch = lower.match(/^delete\\s+(.+)$/i);\n      const addSubtaskMatch = lower.match(/^add\\s+(.+)\\s+under\\s+(.+)$/i);\n      const deleteSubtaskMatch = lower.match(/^delete\\s+(.+)\\s+under\\s+(.+)$/i);\n  \n      if (addTaskMatch) {\n        const newTaskName = addTaskMatch[1].trim();\n        console.log(`🆕 Adding task: \"${newTaskName}\"`);\n        addItem(newTaskName);\n      } else if (deleteTaskMatch) {\n        const deleteTaskName = deleteTaskMatch[1].trim();\n        const taskNames = items.map((t) => t.name.toLowerCase());\n        const { bestMatchIndex, bestMatch } = stringSimilarity.findBestMatch(deleteTaskName, taskNames);\n        const matchedTask = items[bestMatchIndex];\n        if (bestMatch.rating > 0.5) {\n          console.log(`🗑 Deleting task: \"${matchedTask.name}\"`);\n          deleteItem(matchedTask.id);\n        } else {\n          console.warn(`❌ Task not found for deletion: \"${deleteTaskName}\"`);\n        }\n      } else if (addSubtaskMatch) {\n        const subtaskName = addSubtaskMatch[1].trim();\n        const parentName = addSubtaskMatch[2].trim();\n        const taskNames = items.map((t) => t.name.toLowerCase());\n        const { bestMatchIndex, bestMatch } = stringSimilarity.findBestMatch(parentName, taskNames);\n        const parentTask = items[bestMatchIndex];\n        if (bestMatch.rating > 0.5) {\n          console.log(`🆕 Adding subtask \"${subtaskName}\" under \"${parentTask.name}\"`);\n          addSubtask(parentTask.id, subtaskName);\n        } else {\n          console.warn(`❌ Parent task not found for subtask add: \"${parentName}\"`);\n        }\n      } else if (deleteSubtaskMatch) {\n        const subName = deleteSubtaskMatch[1].trim();\n        const taskName = deleteSubtaskMatch[2].trim();\n  \n        const taskNames = items.map((t) => t.name.toLowerCase());\n        const { bestMatchIndex: taskIdx, bestMatch: taskMatch } = stringSimilarity.findBestMatch(taskName, taskNames);\n        const parentTask = items[taskIdx];\n  \n        if (taskMatch.rating > 0.5 && parentTask.subtasks.length > 0) {\n          const subNames = parentTask.subtasks.map((s) => s.name.toLowerCase());\n          const { bestMatchIndex: subIdx, bestMatch: subMatch } = stringSimilarity.findBestMatch(subName, subNames);\n          const matchedSub = parentTask.subtasks[subIdx];\n  \n          if (subMatch.rating > 0.5) {\n            console.log(`🗑 Deleting subtask \"${matchedSub.name}\" under \"${parentTask.name}\"`);\n            deleteSubtask(parentTask.id, matchedSub.id);\n          } else {\n            console.warn(`❌ Subtask not found for deletion: \"${subName}\"`);\n          }\n        } else {\n          console.warn(`❌ Parent task not found for subtask delete: \"${taskName}\"`);\n        }\n      }\n  \n      // === Navigation commands ===\n      if (matchesNavigation(lower, statsKeywords)) {\n        console.log(\"📊 Opening Statistics Dialog via voice\");\n        setStatisticsActive(true);\n        setTimerActive(false);\n        setShopActive(false);\n        setBookActive(false);\n        setMotivationActive(false);\n      } else if (matchesNavigation(lower, shopKeywords)) {\n        console.log(\"🪙 Opening Shop via voice\");\n        setShopActive(true);\n        setIsShopOpen(true);\n        setTimerActive(false);\n        setStatisticsActive(false);\n        setBookActive(false);\n        setMotivationActive(false);\n      } else if (matchesNavigation(lower, methodKeywords)) {\n        console.log(\"📚 Opening Study Methods via voice\");\n        setBookActive(true);\n        setShopActive(false);\n        setTimerActive(false);\n        setStatisticsActive(false);\n        setMotivationActive(false);\n      } else if (matchesNavigation(lower, motivationKeywords)) {\n        console.log(\"💬 Opening Motivation Page via voice\");\n        setMotivationActive(true);\n        setBookActive(false);\n        setShopActive(false);\n        setStatisticsActive(false);\n        setTimerActive(false);\n      } else if (matchesKeyword(lower, backKeywords)) {\n        console.log(\"🔙 Going back via voice\");\n        setShopActive(false);\n        setStatisticsActive(false);\n        setBookActive(false);\n        setMotivationActive(false);\n        setTimerActive(false);\n      }\n  \n      // === Reset command ===\n      set(ref(db, \"/voiceCommand\"), null);\n    });\n  \n    return () => unsubscribe();\n  }, [items, startTimer, startSubtaskTimer, addItem, deleteItem, addSubtask, deleteSubtask]);\n\n  // Trigger Motivation page\n  const handleTriggerMotivation = () => {\n    setTimerActive(false); // force exit timer\n    setMotivationActive(true); // open motivation\n  };\n\n  // UI Rendering Logic\n  return (\n    <>\n      {timerActive && currentTaskId !== null ? (\n        <Timer\n          onTimerEnd={handleTimerEnd}\n          initialBreaks={breaksTaken}\n          onTimeAdjust={handleTimeAdjust}\n          currentTask={\n            typeof currentTaskId === \"object\"\n              ? items.find((t) => t.id === currentTaskId.taskId)\n              : items.find((t) => t.id === currentTaskId)\n          }\n          currentSubtask={\n            typeof currentTaskId === \"object\"\n              ? items\n                  .find((t) => t.id === currentTaskId.taskId)\n                  .subtasks.find((s) => s.id === currentTaskId.subtaskId)\n              : null\n          }\n          onTriggerMotivation={handleTriggerMotivation}\n        />\n      ) : statisticsActive ? (\n        <StatisticsDialog\n          open={true}\n          onClose={() => setStatisticsActive(false)}\n          totalTimeStudied={getTotalTimeStudied()}\n          breaksTaken={breaksTaken}\n          tasks={items}\n          studyHistory={studyHistory}\n        />\n      ) : shopActive ? (\n        <Shop\n          open={isShopOpen}\n          onClose={() => {\n            setIsShopOpen(false);\n            setShopActive(false);\n          }}\n        />\n      ) : bookActive ? (\n        <StudyMethod\n          open={true}\n          onClose={() => setBookActive(false)}\n          totalTimeStudied={getTotalTimeStudied()}\n          breaksTaken={breaksTaken}\n          tasks={items}\n          onSubmit={() => {}}\n        />\n      ) : motivationActive ? (\n        <MotivationPage onClose={() => setMotivationActive(false)} addItem={addItem} />\n      ) : (\n        <Box sx={{ width: \"90%\", maxWidth: \"1400px\", margin: \"20px auto\", padding: 4, background: \"linear-gradient(135deg, #e0f7fa 0%, #e0f2f1 100%)\", borderRadius: \"12px\", boxShadow: \"0px 6px 15px rgba(0, 0, 0, 0.1)\" }}>\n          <AppBar />\n\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", width: \"100%\" }}>\n            <Typography variant=\"h4\" sx={{ fontWeight: \"bold\", mb: 3, color: \"#088F8F\" }}>\n              Task Manager\n            </Typography>\n          </Box>\n\n          <AddText addItem={addItem} />\n          <Divider sx={{ marginY: 2 }} />\n\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", width: \"110%\", mx: \"auto\", ml: \"-5%\" }}>\n            <TaskTable\n              items={items}\n              deleteMode={deleteMode}\n              deleteItem={deleteItem}\n              deleteSubtask={deleteSubtask}\n              startTimer={startTimer}\n              updateTask={updateTask}\n              addSubtask={addSubtask}\n              startSubtaskTimer={startSubtaskTimer}\n              updateSubtask={updateSubTask}\n              toggleTaskCompletion={toggleTaskCompletion}\n              toggleSubtaskCompletion={toggleSubtaskCompletion}\n            />\n          </Box>\n\n          <Box sx={{ textAlign: \"center\", marginTop: 3, display: \"flex\", justifyContent: \"center\", gap: 2 }}>\n            {/* Action Buttons */}\n            <Tooltip title=\"View Study Statistics\">\n              <IconButton sx={{ backgroundColor: \"#90caf9\", color: \"#FFFFFF\", \"&:hover\": { backgroundColor: \"#64b5f6\" } }} onClick={() => { setStatisticsActive(true); setTimerActive(false); setShopActive(false); }}>\n                <BarChartIcon />\n              </IconButton>\n            </Tooltip>\n\n            <Tooltip title=\"Spend Coins in Shop\">\n              <IconButton onClick={() => { setShopActive(true); setIsShopOpen(true); setTimerActive(false); setStatisticsActive(false); }} sx={{ backgroundColor: \"#088F8F\", color: \"#FFFFFF\", padding: \"8px\", \"&:hover\": { backgroundColor: \"#06402B\" } }}>\n                <ShoppingCartIcon />\n              </IconButton>\n            </Tooltip>\n\n            <Tooltip title=\"Study Methods\">\n              <IconButton onClick={() => { setBookActive(true); setShopActive(false); setTimerActive(false); setStatisticsActive(false); }} sx={{ backgroundColor: \"#CE93D8\", color: \"#FFFFFF\", padding: \"8px\", \"&:hover\": { backgroundColor: \"#bc5090\" } }}>\n                <LibraryBooksIcon />\n              </IconButton>\n            </Tooltip>\n\n            <Tooltip title=\"Motivational Boost\">\n              <IconButton sx={{ backgroundColor: \"#e5c185\", color: \"#FFFFFF\", \"&:hover\": { backgroundColor: \"#deae9f\" } }} onClick={() => setMotivationActive(true)}>\n                <SelfImprovementIcon />\n              </IconButton>\n            </Tooltip>\n\n            <Tooltip title={deleteMode ? \"Exit Delete Mode\" : \"Enable Delete Mode\"}>\n              <IconButton onClick={toggleDeleteMode} sx={{ backgroundColor: deleteMode ? \"#76C76B\" : \"#F08080\", color: \"#FFFFFF\", \"&:hover\": { backgroundColor: deleteMode ? \"#5BA157\" : \"#DC6B6B\" } }}>\n                {deleteMode ? <DoneIcon /> : <DeleteIcon />}\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n      )}\n    </>\n  );\n}","import React from \"react\";\nimport AuthForm from \"./components/LoginForm\";\nimport List from \"./components/List\";\nimport { AuthProvider, useAuth } from \"./components/AuthContext\";\n\nfunction PluginContent() {\n  const { user, loading } = useAuth();\n\n  if (loading) return <div>Loading...</div>;\n\n  if (!user) {\n    return <AuthForm onLogin={() => console.log(\"User logged in\")} />;\n  }\n\n  return <List />;\n}\n\nexport default function Plugin() {\n  return (\n    <AuthProvider>\n      <PluginContent />\n    </AuthProvider>\n  );\n}\n"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","firestore","getFirestore","auth","getAuth","AuthForm","onLogin","isLogin","setIsLogin","useState","email","setEmail","password","setPassword","React","Box","sx","maxWidth","mx","textAlign","mt","Typography","variant","mb","TextField","label","type","fullWidth","margin","value","onChange","e","target","Button","onClick","async","userCred","signInWithEmailAndPassword","createUserWithEmailAndPassword","user","uid","error","alert","message","Link","component","lastSentCommand","lastSentTime","StandaloneToggleButton","selected","ToggleButton","handleToggle","event","newSelected","command","now","Date","db","getDatabase","set","ref","sendCommand","width","height","borderRadius","backgroundColor","CheckIcon","fontSize","color","formatTime","seconds","hours","Math","floor","minutes","secs","SubtaskRow","subtask","itemId","deleteMode","editingSubtask","editedSubtaskName","setEditedSubtaskName","toggleSubtaskCompletion","handleSaveSubtask","handleEditSubtask","startSubtaskTimer","deleteSubtask","isEditingThis","taskId","subtaskId","id","TableRow","TableCell","align","whiteSpace","wordWrap","display","alignItems","completed","size","onKeyDown","key","ml","name","time","IconButton","DeleteIcon","SaveIcon","EditIcon","AlarmIcon","SubtaskSection","item","expandedTask","subtaskInput","setSubtaskInput","addSubtask","setEditingSubtask","updateSubtask","handleAddSubtask","trim","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","borderLeft","pl","gutterBottom","fontWeight","Table","TableHead","TableBody","subtasks","length","map","placeholder","AddIcon","TaskRow","editTaskId","editedTaskName","setEditedTaskName","deleteItem","startTimer","toggleExpand","handleEditClick","handleSaveClick","updateTask","role","gap","autoFocus","cursor","reduce","sum","s","transition","padding","justifyContent","ExpandLessIcon","ExpandMoreIcon","TaskTable","items","toggleTaskCompletion","setEditTaskId","setExpandedTask","task","updatedTask","Paper","boxShadow","background","overflow","TableContainer","maxHeight","overflowY","stickyHeader","borderCollapse","borderBottom","Timer","onTimerEnd","initialBreaks","currentTask","currentSubtask","onTimeAdjust","onTriggerMotivation","timerMode","setTimerMode","countdownDuration","setCountdownDuration","timeElapsed","setTimeElapsed","timeRemaining","setTimeRemaining","timerRunning","setTimerRunning","startTime","setStartTime","accumulatedTime","setAccumulatedTime","openTaskDialog","setOpenTaskDialog","breaksTaken","setBreaksTaken","breakMessage","setBreakMessage","submitted","setSubmitted","openCancelDialog","setOpenCancelDialog","reflectAfterClose","setReflectAfterClose","breakMessages","currentUser","wonAudio","Audio","sadAudio","handleResumeTimer","handleCancelFinish","handlePauseResume","prev","random","handleStartTimer","handleFinishTask","statsUserDocRef","doc","statsDefaultDocRef","currentElapsed","elapsedTime","updateTimeDoc","snap","getDoc","newTotalTime","exists","parseTimeStringToSeconds","data","totalTimeStudied","formattedTime","String","padStart","updateDoc","setDoc","Promise","all","console","useEffect","log","commandRef","unsubscribe","onValue","snapshot","voiceCommand","val","lower","toLowerCase","matchesKeyword","keywords","some","kw","includes","timerInterval","setInterval","elapsed","remaining","clearInterval","timeStr","parts","split","Number","flexDirection","textTransform","borderColor","minWidth","inputProps","min","step","max","diff","PauseCircleOutlineIcon","PlayCircleOutlineIcon","remainingSeconds","fontStyle","px","py","play","confetti","Dialog","open","onClose","TransitionProps","onExited","DialogTitle","DialogContent","DialogContentText","DialogActions","handleSelfReflect","handleSelfReflectCancel","AuthContext","createContext","loading","AuthProvider","children","setUser","setLoading","onAuthStateChanged","firebaseUser","Provider","useAuth","useContext","StatisticsDialog","tasks","studyHistory","statsRef","formatted","totalMins","pad","n","minsToHHMMSS","merge","err","uploadStats","remainingMinutes","averageTimePerTask","focusScore","calculateFocusScore","hoursStudied","breaksPerHour","timeScore","breakScore","round","taskChartData","totalTaskTime","total","studyTrends","Object","entries","date","tasksForDay","values","taskTime","p","Stack","spacing","direction","TimerIcon","AvgTimeIcon","FreeBreakfastIcon","StarIcon","toFixed","Tooltip","title","arrow","HelpOutlineIcon","Divider","my","List","index","dailyTimes","timeByTask","filter","entry","ListItem","ListItemText","primary","primaryTypographyProps","secondary","paddingLeft","i","paddingY","paddingX","ResponsiveContainer","BarChart","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","angle","position","RechartsTooltip","Bar","fill","barSize","LineChart","Line","stroke","strokeWidth","Shop","coins","setCoins","showTrophies","setShowTrophies","trophies","setTrophies","cost","emoji","fetchUserData","rawUserId","coinsDocRef","trophiesDocRef","coinsSnap","trophiesSnap","marginBottom","marginTop","find","getItemDetails","elevation","amount","docSnap","currentCoins","arrayUnion","spendCoins","disabled","AddText","addItem","input","setInput","handleAdd","preventDefault","determineStudyMethod","prefersRepetition","prefersLongBlocks","prefersFrequentIntervals","prefersWriting","method","StudyMethod","onSubmit","preferences","setPreferences","recommendedMethod","setRecommendedMethod","handleChange","prevPreferences","FormControl","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","defaultQuotes","MotivationPage","quoteIndex","setQuoteIndex","quotes","setQuotes","selfQuestions","setSelfQuestions","newQuote","setNewQuote","selfQuestionInput","setSelfQuestionInput","editingIndex","setEditingIndex","editedReflectionText","setEditedReflectionText","storedQuotes","localStorage","getItem","JSON","parse","storedReflections","setItem","stringify","handleAddQuote","handleSelfQuestionSave","timestamp","toLocaleString","newReflection","text","handleCancelReflection","nextQuote","prevIndex","updated","_","handleDeleteQuote","handleResetQuotes","RefreshIcon","multiline","rows","shiftKey","reflection","updatedReflections","handleSaveReflection","mr","handleEditReflection","handleDeleteReflection","AppBar","Toolbar","setItems","saved","setDeleteMode","timerActive","setTimerActive","currentTaskId","setCurrentTaskId","statisticsActive","setStatisticsActive","shopActive","setShopActive","bookActive","setBookActive","motivationActive","setMotivationActive","isShopOpen","setIsShopOpen","setStudyHistory","newItem","newSubtask","getTotalTimeStudied","subtaskTime","subTotal","sub","navVerbs","matchesNavigation","v","subtaskMatch","match","taskOnlyMatch","subtaskSpoken","taskSpoken","taskNames","t","taskResult","stringSimilarity","parentTask","bestMatchIndex","bestMatch","rating","subtaskNames","subtaskResult","matchedSubtask","warn","spokenTaskName","lowerCommand","direct","matchedTask","addTaskMatch","deleteTaskMatch","addSubtaskMatch","deleteSubtaskMatch","newTaskName","deleteTaskName","subtaskName","parentName","subName","taskName","taskIdx","taskMatch","subNames","subIdx","subMatch","matchedSub","handleTimerEnd","newBreaks","today","toLocaleDateString","weekday","day","month","handleTimeAdjust","delta","adjustedTask","handleTriggerMotivation","marginY","updateSubTask","newName","subId","BarChartIcon","ShoppingCartIcon","LibraryBooksIcon","SelfImprovementIcon","toggleDeleteMode","DoneIcon","PluginContent","Plugin"],"sourceRoot":""}